INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_RAILWAY_EQUIP_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_RAILWAY_EQUIP_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_FUEL_CONTAINERS_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_FUEL_CONTAINERS_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_VEHICLES_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_VEHICLES_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_TRACTORS_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_TRACTORS_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_TRAILERS_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_TRAILERS_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_ENG_EQUIP_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_ENG_EQUIP_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_MOB_LIFT_EQUIP_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_MOB_LIFT_EQUIP_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_AVIATION_EQUIP_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_AVIATION_EQUIP_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_TECHNICS_VESSELS_EDIT_MILREP_APPOINTMENT_MILITARYCOMMANDSUFFIX', 'Буква',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_TECHNICS_VESSELS_EDIT_MILREP_APPOINTMENT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_PRINT_POSTPONE_RESERVISTS', 'Отсрочки на хора',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_PRINT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_POSTPONE_REPORT', 'Протокол за изпълнение на отсрочването',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_POSTPONE'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_PRINT_POSTPONE_TECHNICS', 'Отсрочки на техника',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_PRINT'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDDECEASEDDEATHCERT', 'Изключен - Починал - Смъртен акт №',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDDECEASEDDATE', 'Изключен - Починал - Дата на смъртен акт',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDAGELIMITORDER', 'Изключен - Пределна възраст - Заповед №',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDAGELIMITDATE', 'Изключен - Пределна възраст - Дата на заповед',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDAGELIMITSIGNEDBY', 'Изключен - Пределна възраст - Подписана от',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDNOTSUITABLECERT', 'Изключен - НГВС с изключване - Удостоверение №',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDNOTSUITABLEDATE', 'Изключен - НГВС с изключване - Дата на удостоверение',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_REMOVEDNOTSUITABLESIGNEDBY', 'Изключен - НГВС с изключване - Подписано от',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_PRINT_ASK', 'Печат на АСК',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS_VOLUNTARYRESERVEANNEXES', 'Доброволен резерв - Допълнителни споразумения',(SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MILREPSTATUS_EDITMILREPSTATUS'));

COMMIT;
/

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_MilRepStatus_AddVoluntaryReserveAnnex', 'Добавяне на допълнително споразумение', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 2);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_MilRepStatus_EditVoluntaryReserveAnnex', 'Редактиране на допълнително споразумение', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 1);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_MilRepStatus_DeleteVoluntaryReserveAnnex', 'Изтриване на допълнително споразумение', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 3);

COMMIT;
/
INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_RemovedDeceasedDeathCert', 'Смъртен акт №', 23);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_RemovedDeceasedDate', 'Дата на смъртен акт', 24);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_RemovedAgeLimitOrder', 'Заповед №', 25);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_RemovedAgeLimitDate', 'Дата на заповед', 26);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_RemovedAgeLimitSignedBy', 'Подписана от', 27);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_RemovedNotSuitableCert', 'Удостоверение №', 28);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_RemovedNotSuitableDate', 'Дата на удостоворение', 29);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_RemovedNotSuitableSignedBy', 'Подписано от', 30);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'RES_Reservist_MilRepStatus_AnnexNumber', 'Доп. сп. №', 31);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_AnnexDate', 'от дата', 32);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('number', 'RES_Reservist_MilRepStatus_AnnexDurationMonths', 'Срок', 33);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_AnnexExpireDate', 'изтича на', 34);

COMMIT;
/
CREATE OR REPLACE PACKAGE PMIS_ADM.CommonFunctions AS
   TYPE PMIS_CURSOR IS REF CURSOR;


   
   PROCEDURE GetUIItemAndChilds (P_UIItemID IN PMIS_ADM.UIItems.UIItemID%TYPE, 
                                 P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE, 
                                 P_UIItems OUT PMIS_ADM.CommonFunctions.PMIS_CURSOR);
 
   FUNCTION GetUIItemsTreeIDs (P_ParentUIItems IN SQL_ListOfIDs, 
                               P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE) RETURN SQL_ListOfIDs;



   FUNCTION GetMilitaryUnitIDsPerUser (P_UserID IN PMIS_ADM.Users.UserID%TYPE) RETURN SQL_ListOfIDs;
   
   FUNCTION GetMilitaryUnitChilds (P_MilitaryUnitIDs IN SQL_ListOfIDs) RETURN SQL_ListOfIDs;
   
   FUNCTION GetMRSPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2;
   FUNCTION GetMRSIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2;

   FUNCTION GetMRSPerPersonHTML (P_PersonID IN number, P_MaxLength IN number) RETURN varchar2;
   FUNCTION GetLanguagesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetDrivingLicensesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetSpecialitiesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetAgeFromEGN (P_EGN IN varchar2) RETURN number;
   FUNCTION GetAgeFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number;
   FUNCTION GetBirthDateFromEGN (P_EGN IN varchar2) RETURN date;
  FUNCTION IsMilitaryUnitActual(P_KOD_MIR IN number) RETURN number;
   
   PROCEDURE CallURL(P_URL IN varchar2);
   PROCEDURE CallGenerateOfflineReports;
   
   FUNCTION GetInitials (P_FULLNAME IN varchar2) RETURN varchar2;
   FUNCTION GetFullAddress (P_CityID IN number, P_DistrictID IN number, P_Address varchar2) RETURN varchar2;
   
   FUNCTION GetMilitaryUnitAndChildren (P_MilitaryUnitID IN UKAZ_OWNER.MIR.KOD_MIR%TYPE) RETURN SQL_ListOfIDs;
  
   FUNCTION GetNKPDRootID (P_NKPDID IN number) RETURN number;
   FUNCTION IsNKPDChildOf(P_NKPDID IN number, P_ParentNKPDID IN number) RETURN number;
   FUNCTION GetNKPDLevel(P_NKPDID IN number) RETURN number;
   function OLD_ADRESS(v_personid IN number) return varchar2;
   function OLD_region(v_personid IN number) return varchar2;
   function OLD_grad(v_personid IN number) return varchar2;
END;
/

CREATE OR REPLACE PACKAGE BODY PMIS_ADM.CommonFunctions AS
   PROCEDURE GetUIItemAndChilds (P_UIItemID IN PMIS_ADM.UIItems.UIItemID%TYPE,
                                 P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE,
                                 P_UIItems OUT PMIS_ADM.CommonFunctions.PMIS_CURSOR) IS

        UIItemIDs SQL_ListOfIDs := SQL_ListOfIDs();
        ParentUIItemID SQL_ListOfIDs := SQL_ListOfIDs();
   BEGIN
      ParentUIItemID.extend();
      ParentUIItemID(1) := P_UIItemID;
      
      UIItemIDs := GetUIItemsTreeIDs(ParentUIItemID, P_RoleID);
      
      OPEN P_UIItems FOR
      SELECT a.UIItemID, a.UIKey, a.UIName, a.ParentUIItemID, b.AccessLevel,
             a.CanSetAccessOnlyOwnData, b.AccessOnlyOwnData
      FROM PMIS_ADM.UIItems a
      LEFT OUTER JOIN PMIS_ADM.UIItemsPerRole b ON a.UIItemID = b.UIItemID AND b.RoleID = P_RoleID
      LEFT OUTER JOIN PMIS_ADM.UIItems c ON a.ParentUIItemID = c.UIItemID
      WHERE a.UIItemID IN (SELECT * FROM TABLE(UIItemIDs));
   END;
   
   FUNCTION GetUIItemsTreeIDs (P_ParentUIItems IN SQL_ListOfIDs, 
                               P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE) RETURN SQL_ListOfIDs IS
                               
      UIItemIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR UIItemsCUR is
      SELECT a.UIItemID
      FROM PMIS_ADM.UIItems a
      LEFT OUTER JOIN PMIS_ADM.UIItemsPerRole b ON a.UIItemID = b.UIItemID AND b.RoleID = P_RoleID
      WHERE a.ParentUIItemID IN (SELECT * FROM TABLE(P_ParentUIItems)) OR ((SELECT COUNT(*) FROM TABLE(P_ParentUIItems)) = 0 AND a.ParentUIItemID IS NULL);
   BEGIN
      OPEN UIItemsCUR;
      
      LOOP
         FETCH UIItemsCUR BULK COLLECT INTO UIItemIDs;
         EXIT WHEN UIItemsCUR%notfound;
      END LOOP;
      
      CLOSE UIItemsCUR;
      
      IF UIItemIDs.COUNT > 0 THEN
         tmp := GetUIItemsTreeIDs(UIItemIDs, P_RoleID);
      
         IF tmp.COUNT > 0 THEN
            UIItemIDs := UIItemIDs MULTISET UNION tmp;
         END IF;
      END IF;
      
      RETURN UIItemIDs;
   END;
   
   
   
   FUNCTION GetMilitaryUnitIDsPerUser (P_UserID IN PMIS_ADM.Users.UserID%TYPE) RETURN SQL_ListOfIDs  IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR MilitaryUnitsCUR is
      SELECT a.MilitaryUnitID
      FROM PMIS_ADM.MilitaryUnitsPerUser a
      WHERE a.UserID = P_UserID;
   BEGIN      
      OPEN MilitaryUnitsCUR;
      
      LOOP
         FETCH MilitaryUnitsCUR BULK COLLECT INTO MilitaryUnitIDs;
         EXIT WHEN MilitaryUnitsCUR%notfound;
      END LOOP;
      
      CLOSE MilitaryUnitsCUR;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
      
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
   
      RETURN MilitaryUnitIDs;
   END;
   
   
   FUNCTION GetMilitaryUnitChilds (P_MilitaryUnitIDs IN SQL_ListOfIDs) RETURN SQL_ListOfIDs IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR MilitaryUnitsCUR is
      SELECT a.KOD_MIR as MilitaryUnitID
      FROM UKAZ_OWNER.STRM a
      WHERE a.STR_KOD_MIR IN (SELECT * FROM TABLE(P_MilitaryUnitIDs)) OR ((SELECT COUNT(*) FROM TABLE(P_MilitaryUnitIDs)) = 0 AND a.STR_KOD_MIR IS NULL) ;
   BEGIN
      OPEN MilitaryUnitsCUR;
      
      LOOP
         FETCH MilitaryUnitsCUR BULK COLLECT INTO MilitaryUnitIDs;
         EXIT WHEN MilitaryUnitsCUR%notfound;
      END LOOP;
      
      CLOSE MilitaryUnitsCUR;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
         
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
      
      RETURN MilitaryUnitIDs;
   END;
   
   FUNCTION GetMRSPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2 IS
                               
      MRS varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT c.MilReportingSpecialityCode || ' ' || c.MilReportingSpecialityName as DisplayName
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN VS_OWNER.VS_VSST_VOS b ON a.VSST_ID = b.VSVOS_VSST_ID
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities c ON CASE WHEN b.VSVOS_VSOKOD IS NOT NULL
                                                                    THEN b.VSVOS_VSOKOD
                                                                    ELSE b.VSVOS_VSSKOD
                                                               END = c.MilReportingSpecialityCode
      WHERE a.VSST_ID = P_VSST_ID
      ORDER BY c.MilReportingSpecialityCode;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRS IS NULL OR LENGTH(MRS) < 3600) THEN
             MRS := MRS || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;">' || 
                              SUBSTR(CurRec.DisplayName, 1, 20) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > 20 THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN MRS;
   END;
   
   FUNCTION GetMRSIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2 IS
                               
      MRSIds varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT c.MilReportSpecialityID
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN VS_OWNER.VS_VSST_VOS b ON a.VSST_ID = b.VSVOS_VSST_ID
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities c ON CASE WHEN b.VSVOS_VSOKOD IS NOT NULL
                                                                    THEN b.VSVOS_VSOKOD
                                                                    ELSE b.VSVOS_VSSKOD
                                                               END = c.MilReportingSpecialityCode
      WHERE a.VSST_ID = P_VSST_ID
      ORDER BY c.MilReportSpecialityID;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRSIds IS NULL OR LENGTH(MRSIds) < 3900) THEN
             MRSIds :=MRSIds || CASE WHEN MRSIds IS NULL THEN '' ELSE ',' END || TO_CHAR(CurRec.MilReportSpecialityID);
         END IF;
      END LOOP;
      
      RETURN MRSIds;
   END;

   FUNCTION GetMRSPerPersonHTML (P_PersonID IN number, P_MaxLength IN number) RETURN varchar2 IS
                               
      MRS varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT b.MilReportingSpecialityCode || ' ' || b.MilReportingSpecialityName as DisplayName
      FROM PMIS_ADM.PersonMilRepSpec a
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities b ON a.MilReportSpecialityID = b.MilReportSpecialityID
      WHERE a.PersonID = P_PersonID
      ORDER BY a.MilReportSpecialityID;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRS IS NULL OR LENGTH(MRS) < 3600) THEN
             MRS := MRS || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;">' || 
                              SUBSTR(CurRec.DisplayName, 1, P_MaxLength) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > P_MaxLength THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN MRS;
   END;

   FUNCTION GetLanguagesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      Lang varchar2(4000);
      
      CURSOR LanguagesCUR is
      SELECT c.EZK_IME as DisplayName
      FROM VS_OWNER.VS_LS a
      LEFT OUTER JOIN VS_OWNER.VS_EZIK b ON a.EGN = b.EZIK_EGNLS
      LEFT OUTER JOIN VS_OWNER.KLV_EZK c ON b.EZIK_EZKKOD = c.EZK_KOD
      WHERE a.PersonID = P_PersonID
      ORDER BY b.EZIK_EZKKOD;
   BEGIN
      FOR CurRec IN LanguagesCUR
      LOOP 
         IF (Lang IS NULL OR LENGTH(Lang) < 3600) THEN
	     IF (Lang IS NOT NULL) THEN
		Lang := Lang || ', ';
	     END IF;

             Lang := Lang || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN Lang;
   END;
   
   FUNCTION GetDrivingLicensesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      DL varchar2(4000);
      
      CURSOR DrivingLicenseCUR is
      SELECT b.DrivingLicenseCategoryName as DisplayName
      FROM PMIS_ADM.PersonDrivingLicenseCategories a
      INNER JOIN PMIS_ADM.DrivingLicenseCategories b ON a.DrivingLicenseCategoryID = b.DrivingLicenseCategoryID      
      WHERE a.PersonID = P_PersonID
      ORDER BY b.Seq;
   BEGIN
      FOR CurRec IN DrivingLicenseCUR
      LOOP 
         IF (DL IS NULL OR LENGTH(DL) < 3600) THEN
	     IF (DL IS NOT NULL) THEN
		DL := DL || ', ';
	     END IF;

             DL := DL || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN DL;
   END;
   
   FUNCTION GetSpecialitiesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      Specs varchar2(4000);
      
      CURSOR SpecsCUR is
      SELECT c.OBR_IME as DisplayName
      FROM VS_OWNER.VS_LS a
      LEFT OUTER JOIN VS_OWNER.VS_OBRG b ON a.EGN = b.OBRG_EGNLS
      LEFT OUTER JOIN VS_OWNER.KLV_OBR c ON b.OBRG_KOD = c.OBR_KOD
      WHERE a.PersonID = P_PersonID
      ORDER BY b.OBRG_KOD;
   BEGIN
      FOR CurRec IN SpecsCUR
      LOOP 
         IF (Specs IS NULL OR LENGTH(Specs) < 3600) THEN
	     IF (Specs IS NOT NULL) THEN
		Specs := Specs || ', ';
	     END IF;

             Specs := Specs || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN Specs;
   END;

   FUNCTION GetAgeFromEGN (P_EGN IN varchar2) RETURN number IS
      Year number;
      Month number;
      Day number;
      Age number;

   BEGIN
      Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;

      Age := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - Year; 

      IF (Month > TO_NUMBER(TO_CHAR(SYSDATE, 'MM'))) THEN
         Age := Age - 1;
      END IF;

      IF (Month = TO_NUMBER(TO_CHAR(SYSDATE, 'MM'))) THEN
         IF (Day > TO_NUMBER(TO_CHAR(SYSDATE, 'DD'))) THEN
            Age := Age - 1;
         END IF;
      END IF;

      RETURN Age;
   END;
 
    FUNCTION GetAgeFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number IS
      Year number;
      Month number;
      Day number;
      Age number;
   BEGIN
     Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;

      Age := TO_NUMBER(TO_CHAR(ToDate, 'YYYY')) - Year; 

      IF (Month > TO_NUMBER(TO_CHAR(ToDate, 'MM'))) THEN
         Age := Age - 1;
      END IF;

      IF (Month = TO_NUMBER(TO_CHAR(ToDate, 'MM'))) THEN
         IF (Day > TO_NUMBER(TO_CHAR(ToDate, 'DD'))) THEN
            Age := Age - 1;
         END IF;
      END IF;

      RETURN Age;
   END;
   
   FUNCTION GetBirthDateFromEGN (P_EGN IN varchar2) RETURN date IS
      Year number;
      Month number;
      Day number;
      BirthDate date;

   BEGIN
      Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;
    
	  BirthDate := TO_DATE(TO_CHAR(Year)||LPAD(TO_CHAR(Month), 2, '0')||LPAD(TO_CHAR(Day), 2, '0'), 'yyyymmdd');

      RETURN BirthDate;
   END;
  
   FUNCTION IsMilitaryUnitActual(P_KOD_MIR IN number) RETURN number IS
	ParentID number;
	Actual number;
   BEGIN    
    SELECT AKTUAL INTO Actual FROM UKAZ_OWNER.MIR WHERE KOD_MIR = P_KOD_MIR;
    SELECT STR_KOD_MIR INTO ParentID FROM UKAZ_OWNER.STRM WHERE KOD_MIR = P_KOD_MIR;
	
	
	LOOP
		IF ParentID IS NULL OR Actual = 0 THEN
			EXIT;
		END IF;
		
		SELECT AKTUAL INTO Actual FROM UKAZ_OWNER.MIR WHERE KOD_MIR = ParentID;
		SELECT STR_KOD_MIR INTO ParentID FROM UKAZ_OWNER.STRM WHERE KOD_MIR = ParentID;		
	END LOOP;
	
	RETURN Actual;
   END;

   PROCEDURE CallURL(P_URL IN varchar2) IS
	req       utl_http.req;
    resp      utl_http.resp;
    name      VARCHAR2(256);
    value     VARCHAR2(1024);
    data      VARCHAR2(255);
    my_scheme VARCHAR2(256);
    my_realm  VARCHAR2(256);
    my_proxy  BOOLEAN;
	BEGIN
	-- Ask UTL_HTTP not to raise an exception for 4xx and 5xx status codes,
	-- rather than just returning the text of the error page.
	  utl_http.set_response_error_check(FALSE);

	-- Begin retrieving this web page.
	  req := utl_http.begin_request(P_URL);

	-- Identify ourselves. Some sites serve special pages for particular browsers.
	  utl_http.set_header(req, 'User-Agent', 'Mozilla/4.0');
	  

	  BEGIN
		resp := utl_http.get_response(req); 
		
		utl_http.end_response(resp);    
	  END;

	END;

	PROCEDURE CallGenerateOfflineReports IS
	BEGIN
		CallURL('http://10.130.32.80/PMISAdmin/PublicPages/GenerateOfflineReports.aspx');
	END;
	
	FUNCTION GetInitials (P_FULLNAME IN varchar2) RETURN varchar2 IS
      Initials varchar2(50);
      FullName varchar2(500);
   BEGIN
      FullName := P_FULLNAME;
	  FullName := TRIM(p_fullname);
	   
	  FullName := REPLACE(FullName, '-', ' ');
	  FullName := REPLACE(FullName, ',', ' ');
	   
	  Initials := SUBSTR(FullName, 1, 1);
	   
	  WHILE (INSTR(FullName, ' ') > 0) LOOP
		 Initials := Initials || SUBSTR(FullName, INSTR(FullName, ' ') + 1, 1);
		 FullName := SUBSTR(FullName, INSTR(FullName, ' ') + 1, LENGTH(FullName) - INSTR(FullName, ' '));
	  END LOOP;

      RETURN UPPER(Initials);
   END;
   
   FUNCTION GetFullAddress (P_CityID IN number, P_DistrictID IN number, P_Address varchar2) RETURN varchar2 IS
     FullAddress varchar2(2000);
   BEGIN
     SELECT c.Ime_Obl || ', ' || 
			b.Ime_Obs || ', ' || 
			a.Ime_Nma ||  
			CASE WHEN P_DistrictID IS NULL THEN ''
				 ELSE ', ' || d.DistrictName
			END || ', ' || CHR(13) || CHR(10) ||
			P_Address
	 INTO FullAddress 
	 FROM UKAZ_OWNER.KL_NMA a
	 INNER JOIN UKAZ_OWNER.KL_OBS b ON a.KOD_OBS = b.KOD_OBS
	 INNER JOIN UKAZ_OWNER.KL_OBL c ON a.KOD_OBL = c.KOD_OBL
	 LEFT OUTER JOIN UKAZ_OWNER.Districts d ON d.DistrictID = P_DistrictID
     WHERE a.Kod_Nma = P_CityID;
	 
	 RETURN FullAddress;
   END;
   
   FUNCTION GetMilitaryUnitAndChildren (P_MilitaryUnitID IN UKAZ_OWNER.MIR.KOD_MIR%TYPE) RETURN SQL_ListOfIDs  IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
   BEGIN      
      MilitaryUnitIDs.EXTEND(1);
	  MilitaryUnitIDs(1) := P_MilitaryUnitID;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
      
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
   
      RETURN MilitaryUnitIDs;
   END;
 
   FUNCTION GetNKPDRootID (P_NKPDID IN number) RETURN number IS
                               
      ParentID number;
      RootID number;
   BEGIN
      SELECT NKPDParentID, NKPDID INTO ParentID, RootID
      FROM PMIS_ADM.NKPD
      WHERE NKPDID = P_NKPDID;
   
      WHILE (ParentID IS NOT NULL) LOOP
		 SELECT NKPDParentID, NKPDID INTO ParentID, RootID
         FROM PMIS_ADM.NKPD
         WHERE NKPDID = ParentID;
	  END LOOP;
      
      RETURN RootID;
   END;
   
   FUNCTION IsNKPDChildOf(P_NKPDID IN number, P_ParentNKPDID IN number) RETURN number IS
    Res number;
	  ParentID number;
	  RootID number;
   BEGIN
      Res := 0;
	  
	  SELECT NKPDParentID INTO ParentID
	  FROM PMIS_ADM.NKPD
      WHERE NKPDID = P_NKPDID;
    
	  WHILE (ParentID IS NOT NULL) LOOP
	  	SELECT NKPDParentID, NKPDID INTO ParentID, RootID
		FROM PMIS_ADM.NKPD
		WHERE NKPDID = ParentID;
	  
		IF RootID = P_ParentNKPDID THEN
		  Res := 1;
		  EXIT;
		END IF;
	  END LOOP;
      
      RETURN Res;
   END;
   
   FUNCTION GetNKPDLevel(P_NKPDID IN number) RETURN number IS
      Res number;
	  ParentID number;
  BEGIN
      Res := 1;
   
	  SELECT NKPDParentID INTO ParentID
	  FROM PMIS_ADM.NKPD
	  WHERE NKPDID = P_NKPDID;
		
	  WHILE (ParentID IS NOT NULL) LOOP
		Res := Res + 1;
		SELECT NKPDParentID INTO ParentID
		FROM PMIS_ADM.NKPD
		WHERE NKPDID = ParentID;
     
   END LOOP;
      
      RETURN Res;
   END;
   
  function OLD_ADRESS(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 281
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;
   
  function OLD_grad(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 279
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;
    
   function OLD_region(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 280
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;      
END;
/

ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_Deceased_DeathCert VARCHAR2(250);
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_Deceased_Date date;
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_AgeLimit_Order VARCHAR2(250);
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_AgeLimit_Date date;
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_AgeLimit_SignedBy VARCHAR2(250);
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_NotSuitable_Cert VARCHAR2(250);
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_NotSuitable_Date date;
ALTER TABLE PMIS_RES.ReservistMilRepStatuses ADD Removed_NotSuitable_SignedBy VARCHAR2(250);
/

UPDATE PMIS_RES.NormativeTechnics SET
   Veh_VehicleKindID = (SELECT TableKey FROM PMIS_RES.GTable WHERE TableName = 'VehicleKind' AND TableValue = 'Лек')
WHERE TechnicsTypeID = (SELECT TechnicsTypeID FROM PMIS_RES.TechnicsTypes WHERE TechnicsTypeKey = 'VEHICLES') AND
      NormativeCode IN ('6');
      
UPDATE PMIS_RES.NormativeTechnics SET
   Veh_VehicleKindID = (SELECT TableKey FROM PMIS_RES.GTable WHERE TableName = 'VehicleKind' AND TableValue = 'Товарен')
WHERE TechnicsTypeID = (SELECT TechnicsTypeID FROM PMIS_RES.TechnicsTypes WHERE TechnicsTypeKey = 'VEHICLES') AND
      NormativeCode IN ('9', '10', '11', '12', '14', '16', '17', '18', '19', '20', '22', '25', '26', '27', '28', '32', '33', '34', '35', '36', '40', '41', '42', '43', '47', '48', '49', '50', '51');
      
UPDATE PMIS_RES.NormativeTechnics SET
   Veh_VehicleKindID = (SELECT TableKey FROM PMIS_RES.GTable WHERE TableName = 'VehicleKind' AND TableValue = 'Специален')
WHERE TechnicsTypeID = (SELECT TechnicsTypeID FROM PMIS_RES.TechnicsTypes WHERE TechnicsTypeKey = 'VEHICLES') AND
      NormativeCode IN ('53', '54', '55', '61', '62', '63', '65', '66', '67', '68', '70', '71', '72', '73', '74', '75', '76', '78', '79', '80', '81', '82', '83', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '100', '101', '102', '103', '104', '110', '111', '112', '113', '114', '115', '116', '118', '119', '120', '123', '124');
      
UPDATE PMIS_RES.NormativeTechnics SET
   Veh_VehicleKindID = (SELECT TableKey FROM PMIS_RES.GTable WHERE TableName = 'VehicleKind' AND TableValue = 'Автобус')
WHERE TechnicsTypeID = (SELECT TechnicsTypeID FROM PMIS_RES.TechnicsTypes WHERE TechnicsTypeKey = 'VEHICLES') AND
      NormativeCode IN ('125', '126', '127');

DELETE FROM PMIS_RES.NormativeTechnics
WHERE normativecode = 189;

UPDATE PMIS_RES.NormativeTechnics
SET normativelevel5 = normativelevel4,
    normativelevel4 = 'Ескаватори'
WHERE normativecode IN (190, 191, 193, 194);

COMMIT;

/

CREATE OR REPLACE FORCE VIEW "PMIS_RES"."VIEWREPORTNORMATIVETECHNICS" ("NORMATIVELEVEL", "ORDERCODE", "NORMATIVECODE", "NORMATIVETECHNICSID", "NORMATIVENAME", "NORMATIVELEVEL1", "NORMATIVELEVEL2", "NORMATIVELEVEL3", "NORMATIVELEVEL4", "NORMATIVELEVEL5", "NORMATIVELEVEL6") AS 
  SELECT 0 as NormativeLevel,
       '00000' as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       'ВСИЧКО' as NormativeName,
       '' as NormativeLevel1,
       '' as NormativeLevel2,
       '' as NormativeLevel3,
       '' as NormativeLevel4,
       '' as NormativeLevel5,
       '' as NormativeLevel6
FROM DUAL
 
 UNION ALL
 
 SELECT 1 as NormativeLevel,
       MIN(LPAD(a.NormativeCode, 5, '0')) as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       TO_CHAR(RANK() OVER (ORDER BY MIN(LPAD(a.NormativeCode, 5, '0')))) || '. ' || a.NormativeLevel1 as NormativeName,
       a.NormativeLevel1,
       '' as NormativeLevel2,
       '' as NormativeLevel3,
       '' as NormativeLevel4,
       '' as NormativeLevel5,
       '' as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
WHERE a.NormativeLevel1 IS NOT NULL
GROUP BY a.NormativeLevel1

UNION ALL

SELECT 2 as NormativeLevel,
       MIN(LPAD(a.NormativeCode, 5, '0')) as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       TO_CHAR(b.TreeNumber) || '. ' ||
       TO_CHAR(RANK() OVER (PARTITION BY a.NormativeLevel1 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0')))) || '. ' || a.NormativeLevel2 as NormativeName,
       a.NormativeLevel1,
       a.NormativeLevel2,
       '' as NormativeLevel3,
       '' as NormativeLevel4,
       '' as NormativeLevel5,
       '' as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
LEFT OUTER JOIN (SELECT a.NormativeLevel1,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1) b ON a.NormativeLevel1 = b.NormativeLevel1
WHERE a.NormativeLevel1 IS NOT NULL AND a.NormativeLevel2 IS NOT NULL
GROUP BY a.NormativeLevel1, b.MinCode, b.TreeNumber, a.NormativeLevel2

UNION ALL

SELECT 3 as NormativeLevel,
       MIN(LPAD(a.NormativeCode, 5, '0')) as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       TO_CHAR(b.TreeNumber) || '. ' ||
       TO_CHAR(c.TreeNumber) || '. ' ||
       TO_CHAR(RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0')))) || '. ' || a.NormativeLevel3 as NormativeName,
       a.NormativeLevel1,
       a.NormativeLevel2,
       a.NormativeLevel3,
       '' as NormativeLevel4,
       '' as NormativeLevel5,
       '' as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
LEFT OUTER JOIN (SELECT a.NormativeLevel1,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1) b ON a.NormativeLevel1 = b.NormativeLevel1
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2) c ON a.NormativeLevel1 = c.NormativeLevel1 AND
                                                                     a.NormativeLevel2 = c.NormativeLevel2
WHERE a.NormativeLevel1 IS NOT NULL AND a.NormativeLevel2 IS NOT NULL AND a.NormativeLevel3 IS NOT NULL
GROUP BY a.NormativeLevel1, b.MinCode, b.TreeNumber, a.NormativeLevel2, c.MinCode, c.TreeNumber, a.NormativeLevel3

UNION ALL

SELECT 4 as NormativeLevel,
       MIN(LPAD(a.NormativeCode, 5, '0')) as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       TO_CHAR(b.TreeNumber) || '. ' ||
       TO_CHAR(c.TreeNumber) || '. ' ||
       TO_CHAR(d.TreeNumber) || '. ' ||
       TO_CHAR(RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0')))) || '. ' || a.NormativeLevel4 as NormativeName,
       a.NormativeLevel1,
       a.NormativeLevel2,
       a.NormativeLevel3,
       a.NormativeLevel4,
       '' as NormativeLevel5,
       '' as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
LEFT OUTER JOIN (SELECT a.NormativeLevel1,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1) b ON a.NormativeLevel1 = b.NormativeLevel1
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2) c ON a.NormativeLevel1 = c.NormativeLevel1 AND
                                                                     a.NormativeLevel2 = c.NormativeLevel2
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3) d ON a.NormativeLevel1 = d.NormativeLevel1 AND
                                                                                        a.NormativeLevel2 = d.NormativeLevel2 AND
                                                                                        a.NormativeLevel3 = d.NormativeLevel3
WHERE a.NormativeLevel1 IS NOT NULL AND a.NormativeLevel2 IS NOT NULL AND a.NormativeLevel3 IS NOT NULL AND a.NormativeLevel4 IS NOT NULL
GROUP BY a.NormativeLevel1, b.MinCode, b.TreeNumber, a.NormativeLevel2, c.MinCode, c.TreeNumber, a.NormativeLevel3, d.MinCode, d.TreeNumber, a.NormativeLevel4

UNION ALL

SELECT 5 as NormativeLevel,
       MIN(LPAD(a.NormativeCode, 5, '0')) as OrderCode,
       '' as NormativeCode,
       0 as NormativeTechnicsID,
       TO_CHAR(b.TreeNumber) || '. ' ||
       TO_CHAR(c.TreeNumber) || '. ' ||
       TO_CHAR(d.TreeNumber) || '. ' ||
       TO_CHAR(e.TreeNumber) || '. ' ||
       TO_CHAR(RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3, a.NormativeLevel4 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0')))) || '. ' || a.NormativeLevel5 as NormativeName,
       a.NormativeLevel1,
       a.NormativeLevel2,
       a.NormativeLevel3,
       a.NormativeLevel4,
       a.NormativeLevel5,
       '' as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
LEFT OUTER JOIN (SELECT a.NormativeLevel1,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1) b ON a.NormativeLevel1 = b.NormativeLevel1
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2) c ON a.NormativeLevel1 = c.NormativeLevel1 AND
                                                                     a.NormativeLevel2 = c.NormativeLevel2
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3) d ON a.NormativeLevel1 = d.NormativeLevel1 AND
                                                                                        a.NormativeLevel2 = d.NormativeLevel2 AND
                                                                                        a.NormativeLevel3 = d.NormativeLevel3
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3, a.NormativeLevel4,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode,
                        RANK() OVER (PARTITION BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3 ORDER BY MIN(LPAD(a.NormativeCode, 5, '0'))) as TreeNumber
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3, a.NormativeLevel4) e ON a.NormativeLevel1 = e.NormativeLevel1 AND
                                                                                                           a.NormativeLevel2 = e.NormativeLevel2 AND
                                                                                                           a.NormativeLevel3 = e.NormativeLevel3 AND
                                                                                                           a.NormativeLevel4 = e.NormativeLevel4
WHERE a.NormativeLevel1 IS NOT NULL AND a.NormativeLevel2 IS NOT NULL AND a.NormativeLevel3 IS NOT NULL AND a.NormativeLevel4 IS NOT NULL AND a.NormativeLevel5 IS NOT NULL
GROUP BY a.NormativeLevel1, b.MinCode, b.TreeNumber, a.NormativeLevel2, c.MinCode, c.TreeNumber, a.NormativeLevel3, d.MinCode, d.TreeNumber, a.NormativeLevel4, e.MinCode, e.TreeNumber, a.NormativeLevel5

UNION ALL

SELECT 6 as NormativeLevel,
       e.MinCode as OrderCode,
       a.NormativeCode,
       a.NormativeTechnicsID,
       a.NormativeName,
       a.NormativeLevel1,
       a.NormativeLevel2,
       a.NormativeLevel3,
       a.NormativeLevel4,
       a.NormativeLevel5,
       a.NormativeName as NormativeLevel6
FROM PMIS_RES.NormativeTechnics a
LEFT OUTER JOIN (SELECT a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3, a.NormativeLevel4, a.NormativeLevel5,
                        MIN(LPAD(a.NormativeCode, 5, '0')) as MinCode
                 FROM PMIS_RES.NormativeTechnics a
                 GROUP BY a.NormativeLevel1, a.NormativeLevel2, a.NormativeLevel3, a.NormativeLevel4, a.NormativeLevel5) e ON NVL(a.NormativeLevel1, '_') = NVL(e.NormativeLevel1, '_') AND
                                                                                                                              NVL(a.NormativeLevel2, '_') = NVL(e.NormativeLevel2, '_') AND
                                                                                                                              NVL(a.NormativeLevel3, '_') = NVL(e.NormativeLevel3, '_') AND
                                                                                                                              NVL(a.NormativeLevel4, '_') = NVL(e.NormativeLevel4, '_') AND
                                                                                                                              NVL(a.NormativeLevel5, '_') = NVL(e.NormativeLevel5, '_');
 
/

CREATE TABLE PMIS_RES.VoluntaryReserveAnnexes(VoluntaryReserveAnnexID number NOT NULL,
                                              ReservistMilRepStatusID number NOT NULL,
                                              AnnexNumber varchar2(250),
                                              AnnexDate date,
                                              AnnexDurationMonths number,
                                              AnnexExpireDate date
                                       );

ALTER TABLE PMIS_RES.VoluntaryReserveAnnexes ADD CONSTRAINT VoluntaryReserveAnnexes_PK PRIMARY KEY (VoluntaryReserveAnnexID);
ALTER TABLE PMIS_RES.VoluntaryReserveAnnexes ADD CONSTRAINT VolResAnnexes_ResMilRepStat_FK FOREIGN KEY (ReservistMilRepStatusID) REFERENCES PMIS_RES.ReservistMilRepStatuses (ReservistMilRepStatusID);

CREATE SEQUENCE PMIS_RES.VoluntaryReserveAnnexes_ID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_RES.TRG_VolReserveAnnexes_INSERT
BEFORE INSERT ON PMIS_RES.VoluntaryReserveAnnexes
FOR EACH ROW
BEGIN
   SELECT PMIS_RES.VoluntaryReserveAnnexes_ID_SEQ.nextval INTO :new.VoluntaryReserveAnnexID FROM dual;
END;
/

GRANT ALL ON PMIS_RES.VoluntaryReserveAnnexes TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_RES.VoluntaryReserveAnnexes_ID_SEQ TO PMIS_USER_ROLE;

/
