GRANT ALL ON VS_OWNER.VS_VSST_ZAP TO PMIS_ADM;
GRANT ALL ON VS_OWNER.KLV_ZAP TO PMIS_ADM;
GRANT ALL ON VS_OWNER.KLV_ZVA TO PMIS_ADM;


ALTER TABLE VS_OWNER.VS_AR_DLO
ADD (
    ARDLO_ENDDATE DATE
    );

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('APPL_APPL_ADD_APPL_MILITARYTRAINING', 'Военна подготовка', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('APPL_APPL_EDIT_APPL_MILITARYTRAINING', 'Военна подготовка', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_ADDRESERVIST_PERSONALDATA_HASMILITARYSERVICE', 'Бил ли е на военна служба?', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_ADDRESERVIST_PERSONALDATA'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_PERSONALDATA_HASMILITARYSERVICE', 'Бил ли е на военна служба?', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_PERSONALDATA'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_MILITARYTRAINING', 'Военна подготовка', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_MILITARYTRAINING', 'Военна подготовка', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO pmis_adm.uiitems(UIKey, UIName, parentuiitemid)
VALUES('RES_HUMANRES_EDITRESERVIST_MILSERV_PREVIOUSPOSITION_VACCANNDATEEND', 'До дата', (SELECT UIItemID FROM PMIS_ADM.uiitems WHERE uikey = 'RES_HUMANRES_EDITRESERVIST_MILSERV_PREVIOUSPOSITION'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_PRINT_DOCUMENTS', 'Печат на документи', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_PRINT_LETTERS', 'Печат на писма', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('RES_HUMANRES_EDITRESERVIST_PERSONALDATA_RECORDOFSERVICEARCHIVE', 'Архив военна книжка', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'RES_HUMANRES_EDITRESERVIST_PERSONALDATA'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('RES_HUMANRES_EDITRESERVIST_MILREP_MEDCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'RES_HUMANRES_EDITRESERVIST_MILREP_MEDCERT'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('RES_HUMANRES_EDITRESERVIST_MILREP_PSYCHCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'RES_HUMANRES_EDITRESERVIST_MILREP_PSYCHCERT'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_REPORTS_VACANNAPPL_REPORT_DETAILED_PERMADDRESS', 'Постоянен адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_REPORTS_VACANNAPPL_REPORT_DETAILED'));

DELETE FROM PMIS_ADM.UIItemsPerRole WHERE UIItemID IN (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_APPL_ADD_APPL_MEDCERT_DATE', 'APPL_APPL_ADD_APPL_MEDCERT_PROTNUM', 'APPL_APPL_ADD_APPL_MEDCERT_CONCLUSION', 'APPL_APPL_ADD_APPL_MEDCERT_MEDRUBRIC'));
DELETE FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_APPL_ADD_APPL_MEDCERT_DATE', 'APPL_APPL_ADD_APPL_MEDCERT_PROTNUM', 'APPL_APPL_ADD_APPL_MEDCERT_CONCLUSION', 'APPL_APPL_ADD_APPL_MEDCERT_MEDRUBRIC');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_PERSONDETAILS_MEDCERT', 'Медицинско освидетелстване', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

UPDATE PMIS_ADM.UIItems SET
	ParentUIItemID = (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS_MEDCERT')
WHERE UIKey IN ('APPL_APPL_EDIT_APPL_MEDCERT_DATE', 'APPL_APPL_EDIT_APPL_MEDCERT_PROTNUM', 'APPL_APPL_EDIT_APPL_MEDCERT_CONCLUSION', 'APPL_APPL_EDIT_APPL_MEDCERT_MEDRUBRIC');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_MEDCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS_MEDCERT'));

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Комисия от дата'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_MEDCERT_DATE';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Протокол'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_MEDCERT_PROTNUM';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Решение'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_MEDCERT_CONCLUSION';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Медицинска рубрика'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_MEDCERT_MEDRUBRIC';


DELETE FROM PMIS_ADM.UIItemsPerRole WHERE UIItemID IN (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_APPL_ADD_APPL_PSYCHCERT_DATE', 'APPL_APPL_ADD_APPL_PSYCHCERT_PROTNUM', 'APPL_APPL_ADD_APPL_PSYCHCERT_CONCLUSION'));
DELETE FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_APPL_ADD_APPL_PSYCHCERT_DATE', 'APPL_APPL_ADD_APPL_PSYCHCERT_PROTNUM', 'APPL_APPL_ADD_APPL_PSYCHCERT_CONCLUSION');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_PERSONDETAILS_PSYCHCERT', 'Психологическа пригодност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

UPDATE PMIS_ADM.UIItems SET
	ParentUIItemID = (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS_PSYCHCERT')
WHERE UIKey IN ('APPL_APPL_EDIT_APPL_PSYCHCERT_DATE', 'APPL_APPL_EDIT_APPL_PSYCHCERT_PROTNUM', 'APPL_APPL_EDIT_APPL_PSYCHCERT_CONCLUSION');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_PSYCHCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS_PSYCHCERT'));

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Комисия от дата'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_PSYCHCERT_DATE';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Протокол'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_PSYCHCERT_PROTNUM';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Решение'
WHERE UIKey = 'APPL_APPL_EDIT_APPL_PSYCHCERT_CONCLUSION';


DELETE FROM PMIS_ADM.UIItemsPerRole WHERE UIItemID IN (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_CADETS_ADDCADET_MEDCERT_DATE', 'APPL_CADETS_ADDCADET_MEDCERT_PROTNUM', 'APPL_CADETS_ADDCADET_MEDCERT_CONCLUSION', 'APPL_CADETS_ADDCADET_MEDCERT_MEDRUBRIC'));
DELETE FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_CADETS_ADDCADET_MEDCERT_DATE', 'APPL_CADETS_ADDCADET_MEDCERT_PROTNUM', 'APPL_CADETS_ADDCADET_MEDCERT_CONCLUSION', 'APPL_CADETS_ADDCADET_MEDCERT_MEDRUBRIC');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_MEDCERT', 'Медицинско освидетелстване', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET'));

UPDATE PMIS_ADM.UIItems SET
	ParentUIItemID = (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT')
WHERE UIKey IN ('APPL_CADETS_EDITCADET_MEDCERT_DATE', 'APPL_CADETS_EDITCADET_MEDCERT_PROTNUM', 'APPL_CADETS_EDITCADET_MEDCERT_CONCLUSION', 'APPL_CADETS_EDITCADET_MEDCERT_MEDRUBRIC');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_MEDCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT'));

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Комисия от дата'
WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT_DATE';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Протокол'
WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT_PROTNUM';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Решение'
WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT_CONCLUSION';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Медицинска рубрика'
WHERE UIKey = 'APPL_CADETS_EDITCADET_MEDCERT_MEDRUBRIC';



DELETE FROM PMIS_ADM.UIItemsPerRole WHERE UIItemID IN (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_CADETS_ADDCADET_PSYCHCERT_DATE', 'APPL_CADETS_ADDCADET_PSYCHCERT_PROTNUM', 'APPL_CADETS_ADDCADET_PSYCHCERT_CONCLUSION'));
DELETE FROM PMIS_ADM.UIItems WHERE UIKey IN ('APPL_CADETS_ADDCADET_PSYCHCERT_DATE', 'APPL_CADETS_ADDCADET_PSYCHCERT_PROTNUM', 'APPL_CADETS_ADDCADET_PSYCHCERT_CONCLUSION');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_PSYCHCERT', 'Психологическа пригодност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET'));

UPDATE PMIS_ADM.UIItems SET
	ParentUIItemID = (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_PSYCHCERT')
WHERE UIKey IN ('APPL_CADETS_EDITCADET_PSYCHCERT_DATE', 'APPL_CADETS_EDITCADET_PSYCHCERT_PROTNUM', 'APPL_CADETS_EDITCADET_PSYCHCERT_CONCLUSION');

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_PSYCHCERT_EXPIRATIONDATE', 'Дата на валидност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_PSYCHCERT'));

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Комисия от дата'
WHERE UIKey = 'APPL_CADETS_EDITCADET_PSYCHCERT_DATE';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Протокол'
WHERE UIKey = 'APPL_CADETS_EDITCADET_PSYCHCERT_PROTNUM';

UPDATE PMIS_ADM.UIItems SET
	UIName = 'Решение'
WHERE UIKey = 'APPL_CADETS_EDITCADET_PSYCHCERT_CONCLUSION';

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_POSITIONS_REGISTER_APPLICATION', 'Регистриране и печат на заявления', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_POSITIONS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_ADD_APPL_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_ADD_APPL_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_ADDCADET_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_ADDCADET_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_CONTACTADDRESS_CITY', 'Адрес за кореспонденция - Град', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_CONTACTADDRESS_ADDRESS', 'Адрес за кореспонденция - Адрес', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_ADD_APPL_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_ADD_APPL_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_ADD_APPL_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDIT_APPL_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_ADDCADET_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_ADDCADET_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_ADDCADET_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_IDCARDNUMBER', 'Лична карта номер', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_IDCARDISSUEDBY', 'Лична карта издадена от', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_IDCARDISSUEDATE', 'Лична карта издадена на', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_PERSONDETAILS'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_EDU_LEARNINGMETHOD', 'Начин на обучение', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_LVLKNG', 'Степен на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_LVLFORM', 'Форма на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_STANAG', 'STANAG (СГЧП)', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_DPLM', 'Диплом', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_DOCNUM', 'Номер на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_APPL_EDITAPPL_EDU_LANG_DOCDATE', 'Дата на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG'));

DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG_WRITE');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG_WRITE';
				  
DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG_SPEAK');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_APPL_EDITAPPL_EDU_LANG_SPEAK';

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_EDU_EDU', 'Образование', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_EDU_SUBJ', 'Специалност', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_EDU_YEAR', 'Година', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_EDU_LEARNINGMETHOD', 'Начин на обучение', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_LANG', 'Език', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_LVLKNG', 'Степен на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_LVLFORM', 'Форма на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_STANAG', 'STANAG (СГЧП)', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_DPLM', 'Диплом', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_DOCNUM', 'Номер на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_CADETS_EDITCADET_EDU_LANG_DOCDATE', 'Дата на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_CADETS_EDITCADET_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_EDU_LEARNINGMETHOD', 'Начин на обучение', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_EDU_LEARNINGMETHOD', 'Начин на обучение', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_EDU'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_LVLKNG', 'Степен на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_LVLFORM', 'Форма на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_STANAG', 'STANAG (СГЧП)', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_DPLM', 'Диплом', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_DOCNUM', 'Номер на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_DOCDATE', 'Дата на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_LVLKNG', 'Степен на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_LVLFORM', 'Форма на владеене', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_STANAG', 'STANAG (СГЧП)', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_DPLM', 'Диплом', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_DOCNUM', 'Номер на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_DOCDATE', 'Дата на документа', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG'));

DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_WRITE');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_WRITE';
				  
DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_SPEAK');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_POTENCIALAPPL_ADD_POTENCIALAPPL_EDU_LANG_SPEAK';

DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_WRITE');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_WRITE';
				  
DELETE FROM  PMIS_ADM.UIItemsPerRole
WHERE UIItemID = (SELECT UIItemID 
				  FROM PMIS_ADM.UIItems
				  WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_SPEAK');

DELETE FROM  PMIS_ADM.UIItems
WHERE UIKey = 'APPL_POTENCIALAPPL_EDIT_POTENCIALAPPL_EDU_LANG_SPEAK';

INSERT INTO  PMIS_ADM.UIItems (UIKey, UIName, ParentUIItemID)
VALUES ('APPL_REPORTS_REGISTER', 'Регистър', (SELECT UIItemID FROM PMIS_ADM.UIItems WHERE UIKey = 'APPL_REPORTS'));

COMMIT;
/

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_AddRecordOfServiceArchive', 'Добавяне на военна книжка в архив', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 2);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_EditRecordOfServiceArchive', 'Редактиране на военна книжка в архив', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 1);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_DeleteRecordOfServiceArchive', 'Изтриване на военна книжка в архив', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 3);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_AddMedCert', 'Добавяне на медицинско освидетелстване', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 2);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_EditMedCert', 'Редактиране на медицинско освидетелстване', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 1);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_DeleteMedCert', 'Изтриване на медицинско освидетелстване', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 3);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_AddPsychCert', 'Добавяне на психологическа пригодност', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 2);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_EditPsychCert', 'Редактиране на психологическа пригодност', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 1);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('RES_Reservist_DeletePsychCert', 'Изтриване на психологическа пригодност', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'RES'), 3);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('APPL_Applicants_AddRegister', 'Регистриране на заявление', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'APPL'), 2);

INSERT INTO PMIS_ADM.ChangeEventTypes(changeeventtypekey, changeeventtype, moduleid, changetype)
VALUES('APPL_Applicants_EditRegister', 'Редактиране на регистрирано заявление', (SELECT ModuleiD FROM PMIS_ADM.modules WHERE modulekey = 'APPL'), 1);

INSERT INTO PMIS_ADM.ChangeEventTypes (ChangeEventTypeKey, ChangeEventType, ModuleID, ChangeType)
VALUES ('APPL_Applicants_MovePosition', 'Преместване на длъжност', (SELECT ModuleID FROM PMIS_ADM.Modules WHERE ModuleKey = 'APPL'), 1);

COMMIT;
/
INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilServ_PreviousPosition_VaccAnnDateEnd', 'До дата', 15);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_MedCertExpirationDate', 'Дата на валидност', 12);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'RES_Reservist_MilRepStatus_PsychCertExpirationDate', 'Дата на валидност', 14);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'ADM_PersonDetails_RecordOfServiceDate', 'Военна книжка издадена на', 24);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'ADM_PersonDetails_RecordOfServiceComment', 'Военна книжка забележка', 25);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('number', 'APPL_Applicants_Register_RegNumber', 'Рег. №', 10);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('date', 'APPL_Applicants_Register_Date', 'Дата', 20);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'APPL_Applicants_Register_PageCount', 'Брой листа', 30);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'APPL_Applicants_Register_Notes', 'Бележки', 40);

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Комисия от дата'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_MedCertDate';

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Протокол'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_MedCertProtNum';

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Решение'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_MedCertConclusion';

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Комисия от дата'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_PsychCertDate';

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Протокол'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_PsychCertProtNum';

UPDATE PMIS_ADM.Fields SET
	fieldname = 'Решение'
WHERE fieldkey = 'RES_Reservist_MilRepStatus_PsychCertConclusion';

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'ADM_PersonDetails_ContactAdr_City', 'Адрес за кореспонденция - Населено място', 4);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'ADM_PersonDetails_ContactAdr_District', 'Адрес за кореспонденция - Район', 4);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'ADM_PersonDetails_ContactAdr_PresSecondPostCode', 'Адрес за кореспонденция - Пощенски код', 4);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('string', 'ADM_PersonDetails_ContactAdr_Address', 'Адрес за кореспонденция - Адрес', 4);

INSERT INTO PMIS_ADM.Fields (fieldtype, fieldkey, fieldname, seq)
VALUES ('number', 'APPL_ApplicantsPosition_Seq', 'Подредба', 1);

COMMIT;
/
ALTER TABLE PMIS_ADM.Persons ADD RecordOfServiceDate date;
CREATE TABLE PMIS_ADM.RecordOfServiceArchives(RecordOfServiceID number NOT NULL,
											  PersonID number NOT NULL,
											  RecordOfServiceSeries varchar2(20),
											  RecordOfServiceNumber varchar2(100),
											  RecordOfServiceDate date,
											  RecordOfServiceCopy number(1) CHECK (RecordOfServiceCopy BETWEEN 0 AND 1), 
											  RecordOfServiceComment varchar2(4000),
											  CreatedBy number NOT NULL,
											  CreatedDate date NOT NULL,
											  LastModifiedBy number NOT NULL,
											  LastModifiedDate date NOT NULL
											 );
											 
ALTER TABLE PMIS_ADM.RecordOfServiceArchives ADD CONSTRAINT RecordOfService_PK PRIMARY KEY(RecordOfServiceID);
ALTER TABLE PMIS_ADM.RecordOfServiceArchives ADD CONSTRAINT RecordOfService_PersonID_FK FOREIGN KEY (PersonID) REFERENCES VS_OWNER.VS_LS (PersonID);
ALTER TABLE PMIS_ADM.RecordOfServiceArchives ADD CONSTRAINT RecordOfService_CreatedBy_FK FOREIGN KEY (CreatedBy) REFERENCES PMIS_ADM.Users (UserID);
ALTER TABLE PMIS_ADM.RecordOfServiceArchives ADD CONSTRAINT RecordOfService_LastModBy_FK FOREIGN KEY (LastModifiedBy) REFERENCES PMIS_ADM.Users (UserID);

CREATE SEQUENCE PMIS_ADM.ROSA_ROSID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_ADM.TRG_ROSA_INSERT
BEFORE INSERT ON PMIS_ADM.RecordOfServiceArchives
FOR EACH ROW
BEGIN
   SELECT PMIS_ADM.ROSA_ROSID_SEQ.nextval INTO :new.RecordOfServiceID FROM dual;
END;
/

COMMIT;
/

CREATE TABLE PMIS_ADM.MedCert(MedCertID number NOT NULL,
							  PersonID number NOT NULL,
							  MedCertDate date,
							  ProtNum varchar2(250),
	                          ConclusionID number,
							  MedRubricID number,
							  ExpirationDate date
                             );

ALTER TABLE PMIS_ADM.MedCert ADD CONSTRAINT MedCert_PK PRIMARY KEY (MedCertID);
ALTER TABLE PMIS_ADM.MedCert ADD CONSTRAINT MedCert_Persons_FK FOREIGN KEY (PersonID) REFERENCES VS_OWNER.VS_LS (PersonID);
ALTER TABLE PMIS_ADM.MedCert ADD CONSTRAINT MedCert_Concl_FK FOREIGN KEY (ConclusionID) REFERENCES PMIS_ADM.MilitaryMedicalConclusions (MilitaryMedicalConclusionID);
ALTER TABLE PMIS_ADM.MedCert ADD CONSTRAINT MedCert_MedRubricID_FK FOREIGN KEY (MedRubricID) REFERENCES PMIS_ADM.MedRubrics(MedRubricID);

CREATE SEQUENCE PMIS_ADM.MedCert_ID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_ADM.TRG_MedCert_INSERT
BEFORE INSERT ON PMIS_ADM.MedCert
FOR EACH ROW
BEGIN
   SELECT PMIS_ADM.MedCert_ID_SEQ.nextval INTO :new.MedCertID FROM dual;
END;
/

INSERT INTO PMIS_ADM.MedCert (PersonID,
							  MedCertDate,
							  ProtNum,
	                          ConclusionID,
							  MedRubricID,
							  ExpirationDate)
SELECT a.PersonID, a.MedCert_Date, a.MedCert_ProtNum, a.MedCert_ConclusionID, a.MedCert_MedRubricID, NULL as ExpirationDate
FROM PMIS_ADM.Persons a
WHERE a.PersonID NOT IN (SELECT PersonID FROM PMIS_ADM.MedCert) AND
      (a.MedCert_Date IS NOT NULL OR a.MedCert_ProtNum IS NOT NULL OR a.MedCert_ConclusionID IS NOT NULL OR a.MedCert_MedRubricID IS NOT NULL);

ALTER TABLE PMIS_ADM.Persons RENAME COLUMN MedCert_Date TO MedCert_Date_;
ALTER TABLE PMIS_ADM.Persons RENAME COLUMN MedCert_ProtNum TO MedCert_ProtNum_;
ALTER TABLE PMIS_ADM.Persons RENAME COLUMN MedCert_ConclusionID TO MedCert_ConclusionID_;
ALTER TABLE PMIS_ADM.Persons RENAME COLUMN MedCert_MedRubricID TO MedCert_MedRubricID_;

COMMIT;
/

CREATE TABLE PMIS_ADM.PsychCert(PsychCertID number NOT NULL,
							    PersonID number NOT NULL,
							    PsychCertDate date,
							    ProtNum varchar2(250),
	                            ConclusionID number,
							    ExpirationDate date
                             );

ALTER TABLE PMIS_ADM.PsychCert ADD CONSTRAINT PsychCert_PK PRIMARY KEY (PsychCertID);
ALTER TABLE PMIS_ADM.PsychCert ADD CONSTRAINT PsychCert_Persons_FK FOREIGN KEY (PersonID) REFERENCES VS_OWNER.VS_LS (PersonID);
ALTER TABLE PMIS_ADM.PsychCert ADD CONSTRAINT PsychCert_Concl_FK FOREIGN KEY (ConclusionID) REFERENCES PMIS_ADM.MilitaryMedicalConclusions (MilitaryMedicalConclusionID);

CREATE SEQUENCE PMIS_ADM.PsychCert_ID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_ADM.TRG_PsychCert_INSERT
BEFORE INSERT ON PMIS_ADM.PsychCert
FOR EACH ROW
BEGIN
   SELECT PMIS_ADM.PsychCert_ID_SEQ.nextval INTO :new.PsychCertID FROM dual;
END;
/

INSERT INTO PMIS_ADM.PsychCert (PersonID,
								PsychCertDate,
								ProtNum,
								ConclusionID,
								ExpirationDate)
SELECT a.PersonID, a.PsychCert_Date, a.PsychCert_ProtNum, a.PsychCert_ConclusionID, NULL as ExpirationDate
FROM PMIS_ADM.Persons a
WHERE a.PersonID NOT IN (SELECT PersonID FROM PMIS_ADM.PsychCert) AND
      (a.PsychCert_Date IS NOT NULL OR a.PsychCert_ProtNum IS NOT NULL OR a.PsychCert_ConclusionID IS NOT NULL);

ALTER TABLE PMIS_ADM.Persons RENAME COLUMN PsychCert_Date TO PsychCert_Date_;
ALTER TABLE PMIS_ADM.Persons RENAME COLUMN PsychCert_ProtNum TO PsychCert_ProtNum_;
ALTER TABLE PMIS_ADM.Persons RENAME COLUMN PsychCert_ConclusionID TO PsychCert_ConclusionID_;

COMMIT;
/

CREATE TABLE PMIS_ADM.Addresses(AddressID number NOT NULL,
								CityID number,
								DistrictID number,
								PostCode varchar2(10),
								AddressText varchar2(1500)
							   );
											 
ALTER TABLE PMIS_ADM.Addresses ADD CONSTRAINT Addresses_PK PRIMARY KEY(AddressID);
ALTER TABLE PMIS_ADM.Addresses ADD CONSTRAINT Addresses_CityID_FK FOREIGN KEY (CityID) REFERENCES UKAZ_OWNER.KL_NMA (Kod_Nma);
ALTER TABLE PMIS_ADM.Addresses ADD CONSTRAINT Addresses_DistrictID_FK FOREIGN KEY (DistrictID) REFERENCES UKAZ_OWNER.Districts (DistrictID);

CREATE SEQUENCE PMIS_ADM.Addresses_ID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_ADM.TRG_Addresses_INSERT
BEFORE INSERT ON PMIS_ADM.Addresses
FOR EACH ROW
BEGIN
   SELECT PMIS_ADM.Addresses_ID_SEQ.nextval INTO :new.AddressID FROM dual;
END;
/

COMMIT;
/

CREATE TABLE PMIS_ADM.PersonAddresses(PersonAddressID number NOT NULL,
									  PersonID number NOT NULL,
									  AddressID number NOT NULL,
									  AddressType varchar2(100)
									 );
											 
ALTER TABLE PMIS_ADM.PersonAddresses ADD CONSTRAINT PersonAddresses_PK PRIMARY KEY(PersonAddressID);
ALTER TABLE PMIS_ADM.PersonAddresses ADD CONSTRAINT PersonAddresses_PersonID_FK FOREIGN KEY (PersonID) REFERENCES VS_OWNER.VS_LS (PersonID);
ALTER TABLE PMIS_ADM.PersonAddresses ADD CONSTRAINT PersonAddresses_AddressID_FK FOREIGN KEY (AddressID) REFERENCES PMIS_ADM.Addresses (AddressID);

CREATE SEQUENCE PMIS_ADM.PersonAddresses_ID_SEQ
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TRIGGER PMIS_ADM.TRG_PersonAddresses_INSERT
BEFORE INSERT ON PMIS_ADM.PersonAddresses
FOR EACH ROW
BEGIN
   SELECT PMIS_ADM.PersonAddresses_ID_SEQ.nextval INTO :new.PersonAddressID FROM dual;
END;
/

COMMIT;
/

CREATE TABLE PMIS_APPL.PositionMilitaryRanks (VacancyAnnouncePositionID number NOT NULL,
                                              MilitaryRankID varchar2(2) NOT NULL
											 );

ALTER TABLE PMIS_APPL.PositionMilitaryRanks ADD CONSTRAINT PositionMilRanks_PK PRIMARY KEY (VacancyAnnouncePositionID, MilitaryRankID);
ALTER TABLE PMIS_APPL.PositionMilitaryRanks ADD CONSTRAINT PositionMilRanks_Pos_FK FOREIGN KEY (VacancyAnnouncePositionID) REFERENCES PMIS_APPL.VacancyAnnouncePositions (VacancyAnnouncePositionID);
ALTER TABLE PMIS_APPL.PositionMilitaryRanks ADD CONSTRAINT PositionMilRanks_Spec_FK FOREIGN KEY (MilitaryRankID) REFERENCES VS_OWNER.KLV_ZVA (ZVA_KOD);

INSERT INTO PMIS_APPL.PositionMilitaryRanks (VacancyAnnouncePositionID, MilitaryRankID)
SELECT VacancyAnnouncePositionID, MilitaryRankID
FROM PMIS_APPL.VacancyAnnouncePositions
WHERE MilitaryRankID IS NOT NULL;

ALTER TABLE PMIS_APPL.VacancyAnnouncePositions RENAME COLUMN MilitaryRankID TO MilitaryRankID_;

/

CREATE OR REPLACE PACKAGE PMIS_ADM.CommonFunctions AS
   TYPE PMIS_CURSOR IS REF CURSOR;


   
   PROCEDURE GetUIItemAndChilds (P_UIItemID IN PMIS_ADM.UIItems.UIItemID%TYPE, 
                                 P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE, 
                                 P_UIItems OUT PMIS_ADM.CommonFunctions.PMIS_CURSOR);
 
   FUNCTION GetUIItemsTreeIDs (P_ParentUIItems IN SQL_ListOfIDs, 
                               P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE) RETURN SQL_ListOfIDs;



   FUNCTION GetMilitaryUnitIDsPerUser (P_UserID IN PMIS_ADM.Users.UserID%TYPE) RETURN SQL_ListOfIDs;
   
   FUNCTION GetMilitaryUnitChilds (P_MilitaryUnitIDs IN SQL_ListOfIDs) RETURN SQL_ListOfIDs;
   
   FUNCTION GetMRSPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2;
   FUNCTION GetMRSIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2;

   FUNCTION GetMRSPerPersonHTML (P_PersonID IN number, P_MaxLength IN number) RETURN varchar2;
   FUNCTION GetLanguagesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetDrivingLicensesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetSpecialitiesPerPerson (P_PersonID IN number) RETURN varchar2;
   FUNCTION GetAgeFromEGN (P_EGN IN varchar2) RETURN number;
   FUNCTION GetAgeFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number;
   FUNCTION GetAgeMonthsPartFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number;
   FUNCTION GetBirthDateFromEGN (P_EGN IN varchar2) RETURN date;
  FUNCTION IsMilitaryUnitActual(P_KOD_MIR IN number) RETURN number;
   
   PROCEDURE CallURL(P_URL IN varchar2);
   PROCEDURE CallGenerateOfflineReports;
   
   FUNCTION GetInitials (P_FULLNAME IN varchar2) RETURN varchar2;
   FUNCTION GetFullAddress (P_CityID IN number, P_DistrictID IN number, P_Address varchar2) RETURN varchar2;
   
   FUNCTION GetMilitaryUnitAndChildren (P_MilitaryUnitID IN UKAZ_OWNER.MIR.KOD_MIR%TYPE) RETURN SQL_ListOfIDs;
  
   FUNCTION GetNKPDRootID (P_NKPDID IN number) RETURN number;
   FUNCTION IsNKPDChildOf(P_NKPDID IN number, P_ParentNKPDID IN number) RETURN number;
   FUNCTION GetNKPDLevel(P_NKPDID IN number) RETURN number;
   function OLD_ADRESS(v_personid IN number) return varchar2;
   function OLD_region(v_personid IN number) return varchar2;
   function OLD_grad(v_personid IN number) return varchar2;
   
   FUNCTION GetRanksPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2;
   FUNCTION GetRankIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2;
END;
/

CREATE OR REPLACE PACKAGE BODY PMIS_ADM.CommonFunctions AS
   PROCEDURE GetUIItemAndChilds (P_UIItemID IN PMIS_ADM.UIItems.UIItemID%TYPE,
                                 P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE,
                                 P_UIItems OUT PMIS_ADM.CommonFunctions.PMIS_CURSOR) IS

        UIItemIDs SQL_ListOfIDs := SQL_ListOfIDs();
        ParentUIItemID SQL_ListOfIDs := SQL_ListOfIDs();
   BEGIN
      ParentUIItemID.extend();
      ParentUIItemID(1) := P_UIItemID;
      
      UIItemIDs := GetUIItemsTreeIDs(ParentUIItemID, P_RoleID);
      
      OPEN P_UIItems FOR
      SELECT a.UIItemID, a.UIKey, a.UIName, a.ParentUIItemID, b.AccessLevel,
             a.CanSetAccessOnlyOwnData, b.AccessOnlyOwnData
      FROM PMIS_ADM.UIItems a
      LEFT OUTER JOIN PMIS_ADM.UIItemsPerRole b ON a.UIItemID = b.UIItemID AND b.RoleID = P_RoleID
      LEFT OUTER JOIN PMIS_ADM.UIItems c ON a.ParentUIItemID = c.UIItemID
      WHERE a.UIItemID IN (SELECT * FROM TABLE(UIItemIDs));
   END;
   
   FUNCTION GetUIItemsTreeIDs (P_ParentUIItems IN SQL_ListOfIDs, 
                               P_RoleID IN PMIS_ADM.UserRoles.RoleID%TYPE) RETURN SQL_ListOfIDs IS
                               
      UIItemIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR UIItemsCUR is
      SELECT a.UIItemID
      FROM PMIS_ADM.UIItems a
      LEFT OUTER JOIN PMIS_ADM.UIItemsPerRole b ON a.UIItemID = b.UIItemID AND b.RoleID = P_RoleID
      WHERE a.ParentUIItemID IN (SELECT * FROM TABLE(P_ParentUIItems)) OR ((SELECT COUNT(*) FROM TABLE(P_ParentUIItems)) = 0 AND a.ParentUIItemID IS NULL);
   BEGIN
      OPEN UIItemsCUR;
      
      LOOP
         FETCH UIItemsCUR BULK COLLECT INTO UIItemIDs;
         EXIT WHEN UIItemsCUR%notfound;
      END LOOP;
      
      CLOSE UIItemsCUR;
      
      IF UIItemIDs.COUNT > 0 THEN
         tmp := GetUIItemsTreeIDs(UIItemIDs, P_RoleID);
      
         IF tmp.COUNT > 0 THEN
            UIItemIDs := UIItemIDs MULTISET UNION tmp;
         END IF;
      END IF;
      
      RETURN UIItemIDs;
   END;
   
   
   
   FUNCTION GetMilitaryUnitIDsPerUser (P_UserID IN PMIS_ADM.Users.UserID%TYPE) RETURN SQL_ListOfIDs  IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR MilitaryUnitsCUR is
      SELECT a.MilitaryUnitID
      FROM PMIS_ADM.MilitaryUnitsPerUser a
      WHERE a.UserID = P_UserID;
   BEGIN      
      OPEN MilitaryUnitsCUR;
      
      LOOP
         FETCH MilitaryUnitsCUR BULK COLLECT INTO MilitaryUnitIDs;
         EXIT WHEN MilitaryUnitsCUR%notfound;
      END LOOP;
      
      CLOSE MilitaryUnitsCUR;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
      
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
   
      RETURN MilitaryUnitIDs;
   END;
   
   
   FUNCTION GetMilitaryUnitChilds (P_MilitaryUnitIDs IN SQL_ListOfIDs) RETURN SQL_ListOfIDs IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
      CURSOR MilitaryUnitsCUR is
      SELECT a.KOD_MIR as MilitaryUnitID
      FROM UKAZ_OWNER.STRM a
      WHERE a.STR_KOD_MIR IN (SELECT * FROM TABLE(P_MilitaryUnitIDs)) OR ((SELECT COUNT(*) FROM TABLE(P_MilitaryUnitIDs)) = 0 AND a.STR_KOD_MIR IS NULL) ;
   BEGIN
      OPEN MilitaryUnitsCUR;
      
      LOOP
         FETCH MilitaryUnitsCUR BULK COLLECT INTO MilitaryUnitIDs;
         EXIT WHEN MilitaryUnitsCUR%notfound;
      END LOOP;
      
      CLOSE MilitaryUnitsCUR;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
         
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
      
      RETURN MilitaryUnitIDs;
   END;
   
   FUNCTION GetMRSPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2 IS
                               
      MRS varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT c.MilReportingSpecialityCode || ' ' || c.MilReportingSpecialityName as DisplayName
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN VS_OWNER.VS_VSST_VOS b ON a.VSST_ID = b.VSVOS_VSST_ID
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities c ON CASE WHEN b.VSVOS_VSOKOD IS NOT NULL
                                                                    THEN b.VSVOS_VSOKOD
                                                                    ELSE b.VSVOS_VSSKOD
                                                               END = c.MilReportingSpecialityCode
      WHERE a.VSST_ID = P_VSST_ID
      ORDER BY c.MilReportingSpecialityCode;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRS IS NULL OR LENGTH(MRS) < 3600) THEN
             MRS := MRS || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;">' || 
                              SUBSTR(CurRec.DisplayName, 1, 20) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > 20 THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN MRS;
   END;
   
   FUNCTION GetMRSIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2 IS
                               
      MRSIds varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT c.MilReportSpecialityID
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN VS_OWNER.VS_VSST_VOS b ON a.VSST_ID = b.VSVOS_VSST_ID
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities c ON CASE WHEN b.VSVOS_VSOKOD IS NOT NULL
                                                                    THEN b.VSVOS_VSOKOD
                                                                    ELSE b.VSVOS_VSSKOD
                                                               END = c.MilReportingSpecialityCode
      WHERE a.VSST_ID = P_VSST_ID
      ORDER BY c.MilReportSpecialityID;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRSIds IS NULL OR LENGTH(MRSIds) < 3900) THEN
             MRSIds :=MRSIds || CASE WHEN MRSIds IS NULL THEN '' ELSE ',' END || TO_CHAR(CurRec.MilReportSpecialityID);
         END IF;
      END LOOP;
      
      RETURN MRSIds;
   END;

   FUNCTION GetMRSPerPersonHTML (P_PersonID IN number, P_MaxLength IN number) RETURN varchar2 IS
                               
      MRS varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT b.MilReportingSpecialityCode || ' ' || b.MilReportingSpecialityName as DisplayName
      FROM PMIS_ADM.PersonMilRepSpec a
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities b ON a.MilReportSpecialityID = b.MilReportSpecialityID
      WHERE a.PersonID = P_PersonID
      ORDER BY a.MilReportSpecialityID;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRS IS NULL OR LENGTH(MRS) < 3600) THEN
             MRS := MRS || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;">' || 
                              SUBSTR(CurRec.DisplayName, 1, P_MaxLength) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > P_MaxLength THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN MRS;
   END;

   FUNCTION GetLanguagesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      Lang varchar2(4000);
      
      CURSOR LanguagesCUR is
      SELECT c.EZK_IME as DisplayName
      FROM VS_OWNER.VS_LS a
      LEFT OUTER JOIN VS_OWNER.VS_EZIK b ON a.EGN = b.EZIK_EGNLS
      LEFT OUTER JOIN VS_OWNER.KLV_EZK c ON b.EZIK_EZKKOD = c.EZK_KOD
      WHERE a.PersonID = P_PersonID
      ORDER BY b.EZIK_EZKKOD;
   BEGIN
      FOR CurRec IN LanguagesCUR
      LOOP 
         IF (Lang IS NULL OR LENGTH(Lang) < 3600) THEN
	     IF (Lang IS NOT NULL) THEN
		Lang := Lang || ', ';
	     END IF;

             Lang := Lang || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN Lang;
   END;
   
   FUNCTION GetDrivingLicensesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      DL varchar2(4000);
      
      CURSOR DrivingLicenseCUR is
      SELECT b.DrivingLicenseCategoryName as DisplayName
      FROM PMIS_ADM.PersonDrivingLicenseCategories a
      INNER JOIN PMIS_ADM.DrivingLicenseCategories b ON a.DrivingLicenseCategoryID = b.DrivingLicenseCategoryID      
      WHERE a.PersonID = P_PersonID
      ORDER BY b.Seq;
   BEGIN
      FOR CurRec IN DrivingLicenseCUR
      LOOP 
         IF (DL IS NULL OR LENGTH(DL) < 3600) THEN
	     IF (DL IS NOT NULL) THEN
		DL := DL || ', ';
	     END IF;

             DL := DL || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN DL;
   END;
   
   FUNCTION GetSpecialitiesPerPerson (P_PersonID IN number) RETURN varchar2 IS
                               
      Specs varchar2(4000);
      
      CURSOR SpecsCUR is
      SELECT c.OBR_IME as DisplayName
      FROM VS_OWNER.VS_LS a
      LEFT OUTER JOIN VS_OWNER.VS_OBRG b ON a.EGN = b.OBRG_EGNLS
      LEFT OUTER JOIN VS_OWNER.KLV_OBR c ON b.OBRG_KOD = c.OBR_KOD
      WHERE a.PersonID = P_PersonID
      ORDER BY b.OBRG_KOD;
   BEGIN
      FOR CurRec IN SpecsCUR
      LOOP 
         IF (Specs IS NULL OR LENGTH(Specs) < 3600) THEN
	     IF (Specs IS NOT NULL) THEN
		Specs := Specs || ', ';
	     END IF;

             Specs := Specs || CurRec.DisplayName;
         END IF;
      END LOOP;
      
      RETURN Specs;
   END;

   FUNCTION GetAgeFromEGN (P_EGN IN varchar2) RETURN number IS
      Year number;
      Month number;
      Day number;
      Age number;

   BEGIN
      Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;

      Age := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - Year; 

      IF (Month > TO_NUMBER(TO_CHAR(SYSDATE, 'MM'))) THEN
         Age := Age - 1;
      END IF;

      IF (Month = TO_NUMBER(TO_CHAR(SYSDATE, 'MM'))) THEN
         IF (Day > TO_NUMBER(TO_CHAR(SYSDATE, 'DD'))) THEN
            Age := Age - 1;
         END IF;
      END IF;

      RETURN Age;
   END;
 
    FUNCTION GetAgeFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number IS
      Year number;
      Month number;
      Day number;
      Age number;
   BEGIN
     Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;

      Age := TO_NUMBER(TO_CHAR(ToDate, 'YYYY')) - Year; 

      IF (Month > TO_NUMBER(TO_CHAR(ToDate, 'MM'))) THEN
         Age := Age - 1;
      END IF;

      IF (Month = TO_NUMBER(TO_CHAR(ToDate, 'MM'))) THEN
         IF (Day > TO_NUMBER(TO_CHAR(ToDate, 'DD'))) THEN
            Age := Age - 1;
         END IF;
      END IF;

      RETURN Age;
   END;
   
   FUNCTION GetAgeMonthsPartFromEGNbyDate (P_EGN IN varchar2, ToDate IN date) RETURN number IS
      Month number;
      Day number;
      AgeMonthsPart number;
   BEGIN
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      IF (Month > 40) THEN
         Month := Month - 40;
      END IF;

      AgeMonthsPart := TO_NUMBER(TO_CHAR(ToDate, 'MM')) - Month; 

      IF (AgeMonthsPart <= 0) THEN
         AgeMonthsPart := AgeMonthsPart + 12;
      END IF;

      IF (Day > TO_NUMBER(TO_CHAR(ToDate, 'DD'))) THEN
         AgeMonthsPart := AgeMonthsPart - 1;
      END IF;

      IF (AgeMonthsPart = 12) THEN
         AgeMonthsPart := 0;
      END IF;

      RETURN AgeMonthsPart;
   END;
   
   FUNCTION GetBirthDateFromEGN (P_EGN IN varchar2) RETURN date IS
      Year number;
      Month number;
      Day number;
      BirthDate date;

   BEGIN
      Year := TO_NUMBER(SUBSTR(P_EGN, 1, 2));
      Month := TO_NUMBER(SUBSTR(P_EGN, 3, 2));
      Day := TO_NUMBER(SUBSTR(P_EGN, 5, 2));

      Year := Year + 1900;

      IF (Month > 40) THEN
         Year := Year + 100;
         Month := Month - 40;
      END IF;
    
	  BirthDate := TO_DATE(TO_CHAR(Year)||LPAD(TO_CHAR(Month), 2, '0')||LPAD(TO_CHAR(Day), 2, '0'), 'yyyymmdd');

      RETURN BirthDate;
   END;
  
   FUNCTION IsMilitaryUnitActual(P_KOD_MIR IN number) RETURN number IS
	ParentID number;
	Actual number;
   BEGIN    
    SELECT AKTUAL INTO Actual FROM UKAZ_OWNER.MIR WHERE KOD_MIR = P_KOD_MIR;
    SELECT STR_KOD_MIR INTO ParentID FROM UKAZ_OWNER.STRM WHERE KOD_MIR = P_KOD_MIR;
	
	
	LOOP
		IF ParentID IS NULL OR Actual = 0 THEN
			EXIT;
		END IF;
		
		SELECT AKTUAL INTO Actual FROM UKAZ_OWNER.MIR WHERE KOD_MIR = ParentID;
		SELECT STR_KOD_MIR INTO ParentID FROM UKAZ_OWNER.STRM WHERE KOD_MIR = ParentID;		
	END LOOP;
	
	RETURN Actual;
   END;

   PROCEDURE CallURL(P_URL IN varchar2) IS
	req       utl_http.req;
    resp      utl_http.resp;
    name      VARCHAR2(256);
    value     VARCHAR2(1024);
    data      VARCHAR2(255);
    my_scheme VARCHAR2(256);
    my_realm  VARCHAR2(256);
    my_proxy  BOOLEAN;
	BEGIN
	-- Ask UTL_HTTP not to raise an exception for 4xx and 5xx status codes,
	-- rather than just returning the text of the error page.
	  utl_http.set_response_error_check(FALSE);

	-- Begin retrieving this web page.
	  req := utl_http.begin_request(P_URL);

	-- Identify ourselves. Some sites serve special pages for particular browsers.
	  utl_http.set_header(req, 'User-Agent', 'Mozilla/4.0');
	  

	  BEGIN
		resp := utl_http.get_response(req); 
		
		utl_http.end_response(resp);    
	  END;

	END;

	PROCEDURE CallGenerateOfflineReports IS
	BEGIN
		CallURL('http://10.130.32.80/PMISAdmin/PublicPages/GenerateOfflineReports.aspx');
	END;
	
	FUNCTION GetInitials (P_FULLNAME IN varchar2) RETURN varchar2 IS
      Initials varchar2(50);
      FullName varchar2(500);
   BEGIN
      FullName := P_FULLNAME;
	  FullName := TRIM(p_fullname);
	   
	  FullName := REPLACE(FullName, '-', ' ');
	  FullName := REPLACE(FullName, ',', ' ');
	   
	  Initials := SUBSTR(FullName, 1, 1);
	   
	  WHILE (INSTR(FullName, ' ') > 0) LOOP
		 Initials := Initials || SUBSTR(FullName, INSTR(FullName, ' ') + 1, 1);
		 FullName := SUBSTR(FullName, INSTR(FullName, ' ') + 1, LENGTH(FullName) - INSTR(FullName, ' '));
	  END LOOP;

      RETURN UPPER(Initials);
   END;
   
   FUNCTION GetFullAddress (P_CityID IN number, P_DistrictID IN number, P_Address varchar2) RETURN varchar2 IS
     FullAddress varchar2(2000);
   BEGIN
     SELECT c.Ime_Obl || ', ' || 
			b.Ime_Obs || ', ' || 
			a.Ime_Nma ||  
			CASE WHEN P_DistrictID IS NULL THEN ''
				 ELSE ', ' || d.DistrictName
			END ||
			CASE WHEN P_Address IS NULL THEN ''
				ELSE ', ' || CHR(13) || CHR(10) || P_Address 
			END
	 INTO FullAddress 
	 FROM UKAZ_OWNER.KL_NMA a
	 INNER JOIN UKAZ_OWNER.KL_OBS b ON a.KOD_OBS = b.KOD_OBS
	 INNER JOIN UKAZ_OWNER.KL_OBL c ON a.KOD_OBL = c.KOD_OBL
	 LEFT OUTER JOIN UKAZ_OWNER.Districts d ON d.DistrictID = P_DistrictID
     WHERE a.Kod_Nma = P_CityID;
	 
	 RETURN FullAddress;
   END;
   
   FUNCTION GetMilitaryUnitAndChildren (P_MilitaryUnitID IN UKAZ_OWNER.MIR.KOD_MIR%TYPE) RETURN SQL_ListOfIDs  IS
                               
      MilitaryUnitIDs SQL_ListOfIDs := SQL_ListOfIDs();
      tmp SQL_ListOfIDs := SQL_ListOfIDs();
      
   BEGIN      
      MilitaryUnitIDs.EXTEND(1);
	  MilitaryUnitIDs(1) := P_MilitaryUnitID;
      
      IF MilitaryUnitIDs.COUNT > 0 THEN
         tmp := GetMilitaryUnitChilds(MilitaryUnitIDs);
      
         IF tmp.COUNT > 0 THEN
            MilitaryUnitIDs := MilitaryUnitIDs MULTISET UNION tmp;
         END IF;
      END IF;
   
      RETURN MilitaryUnitIDs;
   END;
 
   FUNCTION GetNKPDRootID (P_NKPDID IN number) RETURN number IS
                               
      ParentID number;
      RootID number;
   BEGIN
      SELECT NKPDParentID, NKPDID INTO ParentID, RootID
      FROM PMIS_ADM.NKPD
      WHERE NKPDID = P_NKPDID;
   
      WHILE (ParentID IS NOT NULL) LOOP
		 SELECT NKPDParentID, NKPDID INTO ParentID, RootID
         FROM PMIS_ADM.NKPD
         WHERE NKPDID = ParentID;
	  END LOOP;
      
      RETURN RootID;
   END;
   
   FUNCTION IsNKPDChildOf(P_NKPDID IN number, P_ParentNKPDID IN number) RETURN number IS
    Res number;
	  ParentID number;
	  RootID number;
   BEGIN
      Res := 0;
	  
	  SELECT NKPDParentID INTO ParentID
	  FROM PMIS_ADM.NKPD
      WHERE NKPDID = P_NKPDID;
    
	  WHILE (ParentID IS NOT NULL) LOOP
	  	SELECT NKPDParentID, NKPDID INTO ParentID, RootID
		FROM PMIS_ADM.NKPD
		WHERE NKPDID = ParentID;
	  
		IF RootID = P_ParentNKPDID THEN
		  Res := 1;
		  EXIT;
		END IF;
	  END LOOP;
      
      RETURN Res;
   END;
   
   FUNCTION GetNKPDLevel(P_NKPDID IN number) RETURN number IS
      Res number;
	  ParentID number;
  BEGIN
      Res := 1;
   
	  SELECT NKPDParentID INTO ParentID
	  FROM PMIS_ADM.NKPD
	  WHERE NKPDID = P_NKPDID;
		
	  WHILE (ParentID IS NOT NULL) LOOP
		Res := Res + 1;
		SELECT NKPDParentID INTO ParentID
		FROM PMIS_ADM.NKPD
		WHERE NKPDID = ParentID;
     
   END LOOP;
      
      RETURN Res;
   END;
   
  function OLD_ADRESS(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 281
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;
   
  function OLD_grad(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 279
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;
    
   function OLD_region(v_personid IN number) return varchar2 is
  Result varchar2(4000);
      
      CURSOR OldAdressCUR is
      select cd.oldvalue
       from pmis_adm.changeeventdetails cd
       join pmis_adm.changeevents ce on ce.changeeventid = cd.changeeventid

       join pmis_adm.changeslog cl on cl.changeid = ce.changeid
       where ce.changeeventtypeid = 130
         and cd.fieldid = 280
         and ce.personid = v_personid
       order by changedate DESC;
   
   BEGIN
      FOR CurRec IN OldAdressCUR
      LOOP 
         IF (Result IS NULL OR LENGTH(Result) < 3900) THEN
             Result :=Result || CASE WHEN Result IS NULL THEN '' ELSE '; ' END || TO_CHAR(CurRec.oldvalue);
         END IF;
      END LOOP;
      
      RETURN Result;
    end;
	
	FUNCTION GetRanksPerVSSTRecordHTML (P_VSST_ID IN number) RETURN varchar2 IS
                               
      Ranks varchar2(4000);
      
      CURSOR MilitaryRanksCUR is
      SELECT d.ZVA_IME as DisplayName, MAX(b.IsPrimary) as IsPrimary
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN (SELECT VSST_ID, VSST_ZAPKOD, 1 as IsPrimary
	                   FROM VS_OWNER.VS_VSST
					   UNION
					   SELECT VSZAP_VSST_ID as VSST_ID, VSZAP_ZAPKOD as VSST_ZAPKOD, 0 as IsPrimary
					   FROM VS_OWNER.VS_VSST_ZAP) b ON a.VSST_ID = b.VSST_ID 
      LEFT OUTER JOIN VS_OWNER.KLV_ZAP c ON b.VSST_ZAPKOD = c.ZAP_KOD
	  LEFT OUTER JOIN VS_OWNER.KLV_ZVA d ON c.ZAP_ZVA_KOD = d.ZVA_KOD
      WHERE a.VSST_ID = P_VSST_ID
      GROUP BY c.ZAP_ZVA_KOD, d.ZVA_IME
      ORDER BY MAX(b.IsPrimary) DESC, c.ZAP_ZVA_KOD;
   BEGIN
      FOR CurRec IN MilitaryRanksCUR
      LOOP 
         IF (Ranks IS NULL OR LENGTH(Ranks) < 3600) THEN
             Ranks := Ranks || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;' || CASE WHEN CurRec.IsPrimary = 1 THEN 'font-weight: bold;' ELSE '' END || '">' || 
                              SUBSTR(CurRec.DisplayName, 1, 20) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > 20 THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN Ranks;
   END;
   
   FUNCTION GetRankIdsPerVSSTRecord (P_VSST_ID IN number) RETURN varchar2 IS
                               
      RankIds varchar2(4000);
      
      CURSOR MilitaryRanksCUR is
	  
	  SELECT c.ZAP_ZVA_KOD as MilitaryRankID
      FROM VS_OWNER.VS_VSST a
      LEFT OUTER JOIN (SELECT VSST_ID, VSST_ZAPKOD
	                   FROM VS_OWNER.VS_VSST
					   UNION
					   SELECT VSZAP_VSST_ID as VSST_ID, VSZAP_ZAPKOD as VSST_ZAPKOD
					   FROM VS_OWNER.VS_VSST_ZAP) b ON a.VSST_ID = b.VSST_ID 
      LEFT OUTER JOIN VS_OWNER.KLV_ZAP c ON b.VSST_ZAPKOD = c.ZAP_KOD
      WHERE a.VSST_ID = P_VSST_ID
      ORDER BY c.ZAP_ZVA_KOD;
   BEGIN
      FOR CurRec IN MilitaryRanksCUR
      LOOP 
         IF (RankIds IS NULL OR LENGTH(RankIds) < 3900) THEN
             RankIds := RankIds || CASE WHEN RankIds IS NULL THEN '' ELSE ',' END || TO_CHAR(CurRec.MilitaryRankID);
         END IF;
      END LOOP;
      
      RETURN RankIds;
   END;
END;
/

UPDATE PMIS_APPL.ApplicantPositions t
SET Seq = (
      SELECT "Rank"
      FROM (
            SELECT a.ApplicantPositionID, a.ApplicantID, b.VacancyAnnounceID, b.ResponsibleMilitaryUnitID,
                   RANK() OVER(PARTITION BY a.ApplicantID, b.VacancyAnnounceID, b.ResponsibleMilitaryUnitID ORDER BY a.ApplicantPositionID ASC) "Rank"  
            FROM PMIS_APPL.ApplicantPositions a
            INNER JOIN PMIS_APPL.VacancyAnnouncePositions b ON a.VacancyAnnouncePositionID = b.VacancyAnnouncePositionID)  tmp
      WHERE tmp.ApplicantPositionID = t.ApplicantPositionID);
      
COMMIT;

ALTER TABLE PMIS_APPL.PersonEducations RENAME TO PersonEducations_;

ALTER TABLE PMIS_APPL.PersonLanguages RENAME TO PersonLanguages_;

CREATE TABLE PMIS_APPL.RegisterNumbers
(
  MilitaryDepartmentID number NOT NULL,
  Year number NOT NULL,
  LastNumber number NOT NULL
);

ALTER TABLE PMIS_APPL.RegisterNumbers ADD CONSTRAINT RegisterNumbers_PK PRIMARY KEY (MilitaryDepartmentID, Year);
ALTER TABLE PMIS_APPL.RegisterNumbers ADD CONSTRAINT RegisterNumbers_MilitaryDep_FK FOREIGN KEY (MilitaryDepartmentID) REFERENCES PMIS_ADM.MilitaryDepartments (MilitaryDepartmentID);

CREATE TABLE PMIS_APPL.Register
(
  ApplicantID number NOT NULL,
  VacancyAnnounceID number NOT NULL,
  ResponsibleMilitaryUnitID number NOT NULL,
  RegisterNumber number NOT NULL,
  DocumentDate date,
  PageCount varchar2(10),
  Notes varchar2(250)
);

ALTER TABLE PMIS_APPL.Register ADD CONSTRAINT Register_PK PRIMARY KEY (ApplicantID, VacancyAnnounceID, ResponsibleMilitaryUnitID);
ALTER TABLE PMIS_APPL.Register ADD CONSTRAINT Register_Applicants_FK FOREIGN KEY (ApplicantID) REFERENCES PMIS_APPL.Applicants (ApplicantID);
ALTER TABLE PMIS_APPL.Register ADD CONSTRAINT Register_VacancyAnnounce_FK FOREIGN KEY (VacancyAnnounceID) REFERENCES PMIS_APPL.VacancyAnnounces (VacancyAnnounceID);
ALTER TABLE PMIS_APPL.Register ADD CONSTRAINT Register_ResMilUnit_FK FOREIGN KEY (ResponsibleMilitaryUnitID) REFERENCES UKAZ_OWNER.MIR (KOD_MIR);

CREATE TABLE PMIS_RES.CommandPositionMilRanks (RequestCommandPositionID number NOT NULL,
                                               MilitaryRankID varchar2(2) NOT NULL,
                                               IsPrimary number(1) CHECK (IsPrimary BETWEEN 0 AND 1)
											  );

ALTER TABLE PMIS_RES.CommandPositionMilRanks ADD CONSTRAINT CmdPositionMilRanks_PK PRIMARY KEY (RequestCommandPositionID, MilitaryRankID);
ALTER TABLE PMIS_RES.CommandPositionMilRanks ADD CONSTRAINT CmdPositionMilRanks_Pos_FK FOREIGN KEY (RequestCommandPositionID) REFERENCES PMIS_RES.RequestCommandPositions (RequestCommandPositionID);
ALTER TABLE PMIS_RES.CommandPositionMilRanks ADD CONSTRAINT CmdPositionMilRanks_Spec_FK FOREIGN KEY (MilitaryRankID) REFERENCES VS_OWNER.KLV_ZVA (ZVA_KOD);

INSERT INTO PMIS_RES.CommandPositionMilRanks (RequestCommandPositionID, MilitaryRankID, IsPrimary)
SELECT RequestCommandPositionID, MilitaryRankID, 1 as IsPrimary 
FROM PMIS_RES.RequestCommandPositions
WHERE MilitaryRankID IS NOT NULL;

ALTER TABLE PMIS_RES.RequestCommandPositions RENAME COLUMN MilitaryRankID TO MilitaryRankID_;

/

  CREATE OR REPLACE PACKAGE "PMIS_RES"."RESFUNCTIONS" AS
   FUNCTION GetMRSPerReqCmdPositionHTML (P_RequestCommandPositionID IN number, P_MaxLength IN number) RETURN varchar2;
   FUNCTION GetMRSIdsPerReqCmdPosition (P_RequestCommandPositionID IN number) RETURN varchar2;
   FUNCTION GetEquipResReq_ResCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   FUNCTION GetEquipResReq_FulfilCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   FUNCTION GetEquipResReq_FulfilResCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   FUNCTION GetEquipTechReq_Count (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   FUNCTION GetEquipTechReq_FulfilCount (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   FUNCTION GetEquipTechReq_FulfilResCount (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number;
   PROCEDURE MilitaryEmployed(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE);
   PROCEDURE Clear_Status_Reservist(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE);
   PROCEDURE Removed_Status_Reservist(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE, Rem_reason IN PMIS_RES.GTABLE.TABLEKEY%TYPE, Rem_date IN PMIS_RES.ReservistMilRepStatuses.REMOVED_DATE%TYPE);
   FUNCTION GetRanksPerReqCmdPositionHTML (P_RequestCommandPositionID IN number, P_MaxLength IN number) RETURN varchar2;
   FUNCTION GetRankIdsPerReqCmdPosition (P_RequestCommandPositionID IN number) RETURN varchar2;
END;
/
 


  CREATE OR REPLACE PACKAGE BODY "PMIS_RES"."RESFUNCTIONS" AS
   FUNCTION GetMRSPerReqCmdPositionHTML (P_RequestCommandPositionID IN number, P_MaxLength IN number) RETURN varchar2 IS
                               
      MRS varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT b.MilReportingSpecialityCode || ' ' || b.MilReportingSpecialityName as DisplayName, NVL(a.IsPrimary, 0) as IsPrimary
      FROM PMIS_RES.CommandPositionMRSpecialities a
      LEFT OUTER JOIN PMIS_ADM.MilitaryReportSpecialities b ON a.MilReportSpecialityID = b.MilReportSpecialityID
      WHERE a.RequestCommandPositionID = P_RequestCommandPositionID
      ORDER BY NVL(a.IsPrimary, 0) DESC, b.MilReportingSpecialityCode;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRS IS NULL OR LENGTH(MRS) < 3600) THEN
             MRS := MRS || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;' || CASE WHEN CurRec.IsPrimary = 1 THEN 'font-weight: bold;' ELSE '' END || '">' || 
                              SUBSTR(CurRec.DisplayName, 1, P_MaxLength) || 
                              CASE WHEN LENGTH (CurRec.DisplayName) > P_MaxLength THEN '...' ELSE '' END || 
                           '</div>';
         END IF;
      END LOOP;
      
      RETURN MRS;
   END;

   FUNCTION GetMRSIdsPerReqCmdPosition (P_RequestCommandPositionID IN number) RETURN varchar2 IS
                               
      MRSIds varchar2(4000);
      
      CURSOR MilitaryReportSpecialitiesCUR is
      SELECT a.MilReportSpecialityID
      FROM PMIS_RES.CommandPositionMRSpecialities a
      WHERE a.RequestCommandPositionID = P_RequestCommandPositionID
      ORDER BY a.MilReportSpecialityID;
   BEGIN
      FOR CurRec IN MilitaryReportSpecialitiesCUR
      LOOP 
         IF (MRSIds IS NULL OR LENGTH(MRSIds) < 3900) THEN
             MRSIds :=MRSIds || CASE WHEN MRSIds IS NULL THEN '' ELSE ',' END || TO_CHAR(CurRec.MilReportSpecialityID);
         END IF;
      END LOOP;
      
      RETURN MRSIds;
   END;
   
   FUNCTION GetEquipResReq_ResCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(SUM(a.ReservistsCount), 0) as Cnt
                    FROM PMIS_RES.RequestCommandPositionsMilDept a
                    INNER JOIN PMIS_RES.RequestCommandPositions b ON a.RequestCommandPositionID = b.RequestCommandPositionID
                    INNER JOIN PMIS_RES.RequestsCommands c ON b.RequestsCommandID = c.RequestsCommandID
                    WHERE c.EquipmentReservistsRequestID = ' || TO_CHAR(P_EquipmentReservistsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   FUNCTION GetEquipResReq_FulFilCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(COUNT(*), 0) as Cnt
                    FROM PMIS_RES.FillReservistsRequest a
                    INNER JOIN PMIS_RES.RequestCommandPositions b ON a.RequestCommandPositionID = b.RequestCommandPositionID
                    INNER JOIN PMIS_RES.RequestsCommands c ON b.RequestsCommandID = c.RequestsCommandID
                    WHERE a.ReservistReadinessID = 1 AND c.EquipmentReservistsRequestID = ' || TO_CHAR(P_EquipmentReservistsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   FUNCTION GetEquipResReq_FulFilResCount (P_EquipmentReservistsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(COUNT(*), 0) as Cnt
                    FROM PMIS_RES.FillReservistsRequest a
                    INNER JOIN PMIS_RES.RequestCommandPositions b ON a.RequestCommandPositionID = b.RequestCommandPositionID
                    INNER JOIN PMIS_RES.RequestsCommands c ON b.RequestsCommandID = c.RequestsCommandID
                    WHERE a.ReservistReadinessID = 2 AND c.EquipmentReservistsRequestID = ' || TO_CHAR(P_EquipmentReservistsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   
   FUNCTION GetEquipTechReq_Count (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(SUM(a.Count), 0) as Cnt
                    FROM PMIS_RES.TechRequestCmdPositionsMilDept a
                    INNER JOIN PMIS_RES.TechnicsRequestCmdPositions b ON a.TechnicsRequestCmdPositionID = b.TechnicsRequestCmdPositionID
                    INNER JOIN PMIS_RES.TechnicsRequestCommands c ON b.TechRequestsCommandID = c.TechRequestsCommandID
                    WHERE c.EquipmentTechnicsRequestID = ' || TO_CHAR(P_EquipmentTechnicsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   FUNCTION GetEquipTechReq_FulFilCount (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(SUM(t.ItemsCount), 0) as Cnt
                    FROM PMIS_RES.FulfilTechnicsRequest a
                    INNER JOIN PMIS_RES.Technics t ON a.TechnicsID = t.TechnicsID
                    INNER JOIN PMIS_RES.TechnicsRequestCmdPositions b ON a.TechnicsRequestCmdPositionID = b.TechnicsRequestCmdPositionID
                    INNER JOIN PMIS_RES.TechnicsRequestCommands c ON b.TechRequestsCommandID = c.TechRequestsCommandID
                    WHERE a.TechnicReadinessID = 1 AND c.EquipmentTechnicsRequestID = ' || TO_CHAR(P_EquipmentTechnicsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   FUNCTION GetEquipTechReq_FulFilResCount (P_EquipmentTechnicsRequestID IN number, P_MilDepFilter IN varchar2) RETURN number IS
                               
      Cnt number := 0;
      
      TYPE cur_typ IS REF CURSOR;
      c cur_typ;
      query_str VARCHAR2(4000);
   BEGIN
      query_str := 'SELECT NVL(SUM(t.ItemsCount), 0) as Cnt
                    FROM PMIS_RES.FulfilTechnicsRequest a
                    INNER JOIN PMIS_RES.Technics t ON a.TechnicsID = t.TechnicsID
                    INNER JOIN PMIS_RES.TechnicsRequestCmdPositions b ON a.TechnicsRequestCmdPositionID = b.TechnicsRequestCmdPositionID
                    INNER JOIN PMIS_RES.TechnicsRequestCommands c ON b.TechRequestsCommandID = c.TechRequestsCommandID
                    WHERE a.TechnicReadinessID = 2 AND c.EquipmentTechnicsRequestID = ' || TO_CHAR(P_EquipmentTechnicsRequestID);
                    
      IF P_MilDepFilter IS NOT NULL THEN
         query_str := query_str || ' AND
                      a.MilitaryDepartmentID IN (' || P_MilDepFilter || ')';
      END IF;
                    
      OPEN c FOR query_str;
      LOOP
          FETCH c INTO Cnt;
          EXIT WHEN c%NOTFOUND;
      END LOOP;
      CLOSE c;
      
      RETURN Cnt;
   END;
   
   PROCEDURE MilitaryEmployed(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE) IS
      v_MilEmployed_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusKey PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusKey%TYPE;
	  v_PersonID VS_OWNER.VS_LS.PersonID%TYPE;
	  v_ReservistID PMIS_RES.Reservists.ReservistID%TYPE;
	  v_AdministrationID PMIS_ADM.Administrations.AdministrationID%TYPE;
	  v_MilitaryDepartmentID PMIS_ADM.MilitaryDepartments.MilitaryDepartmentID%TYPE;
	  v_Cnt number;
   BEGIN
      SELECT COUNT(*) INTO v_Cnt 
	  FROM VS_OWNER.VS_LS
	  WHERE EGN = P_EGN;
	  
	  IF v_Cnt = 1 THEN --Existing person
	     SELECT PersonID INTO v_PersonID 
	     FROM VS_OWNER.VS_LS
	     WHERE EGN = P_EGN;
		 
		 v_Cnt := 0;
		 
		 SELECT COUNT(*) INTO v_Cnt
		 FROM PMIS_RES.Reservists 
		 WHERE PersonID = v_PersonID;
		 
		 IF v_Cnt = 1 THEN --Existing reservist
		    SELECT ReservistID INTO v_ReservistID
		    FROM PMIS_RES.Reservists 
		    WHERE PersonID = v_PersonID;
			
			SELECT MilitaryReportStatusID INTO v_MilEmployed_StatusID
			FROM PMIS_RES.MilitaryReportStatuses
			WHERE MilitaryReportStatusKey = 'MILITARY_EMPLOYED';
			
			SELECT NVL(c.MilitaryReportStatusID, 0) INTO v_Current_StatusID
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
			SELECT NVL(c.MilitaryReportStatusKey, 0) INTO v_Current_StatusKey
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
			IF v_Current_StatusID <> v_MilEmployed_StatusID AND v_Current_StatusID > 0 THEN --The reservist isn't Military Employed and it is in the military report
			   SELECT NVL(b.SourceMilDepartmentID, 0) INTO v_MilitaryDepartmentID
			   FROM PMIS_RES.Reservists a
			   LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			   WHERE a.ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.ReservistMilRepStatuses SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.ReservistAppointments SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.Reservists SET
			      GroupManagementSection = NULL,
				  Section = NULL,
				  Deliverer = NULL,
				  PunktID = NULL
			   WHERE ReservistID = v_ReservistID;
			   
			   DELETE FROM PMIS_RES.FillReservistsRequest
			   WHERE ReservistID = v_ReservistID;
			   
			   SELECT MAX(AdministrationID) INTO v_AdministrationID
			   FROM PMIS_ADM.Administrations
			   WHERE AdministrationName = 'МО';
			   
			   INSERT INTO PMIS_RES.ReservistMilRepStatuses (ReservistID, IsCurrent, MilitaryReportStatusID, EnrolDate, SourceMilDepartmentID,
			      MilEmployed_AdministrationID)
			   VALUES (v_ReservistID, 1, v_MilEmployed_StatusID, SYSDATE, v_MilitaryDepartmentID,
			      v_AdministrationID);
			END IF;
		 END IF;
	  END IF;
   END;
   
  PROCEDURE Clear_Status_Reservist(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE) IS
    v_MilEmployed_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusKey PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusKey%TYPE;
	  v_PersonID VS_OWNER.VS_LS.PersonID%TYPE;
	  v_ReservistID PMIS_RES.Reservists.ReservistID%TYPE;
	  v_MilitaryDepartmentID PMIS_ADM.MilitaryDepartments.MilitaryDepartmentID%TYPE;
	  v_Cnt number;
   BEGIN
      SELECT COUNT(*) INTO v_Cnt 
	  FROM VS_OWNER.VS_LS
	  WHERE EGN = P_EGN;
	  
	  IF v_Cnt = 1 THEN --Existing person
	     SELECT PersonID INTO v_PersonID 
	     FROM VS_OWNER.VS_LS
	     WHERE EGN = P_EGN;
		 
		 v_Cnt := 0;
		 
		 SELECT COUNT(*) INTO v_Cnt
		 FROM PMIS_RES.Reservists 
		 WHERE PersonID = v_PersonID;
		 
		 IF v_Cnt = 1 THEN --Existing reservist
		    SELECT ReservistID INTO v_ReservistID
		    FROM PMIS_RES.Reservists 
		    WHERE PersonID = v_PersonID;
			
			SELECT MilitaryReportStatusID INTO v_MilEmployed_StatusID
			FROM PMIS_RES.MilitaryReportStatuses
			WHERE MilitaryReportStatusKey = 'FREE';
			
			SELECT NVL(c.MilitaryReportStatusID, 0) INTO v_Current_StatusID
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
			SELECT NVL(c.MilitaryReportStatusKey, 0) INTO v_Current_StatusKey
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
			IF v_Current_StatusID <> v_MilEmployed_StatusID AND v_Current_StatusID > 0 THEN --The reservist isn't Military Employed and it is in the military report
			   SELECT NVL(b.SourceMilDepartmentID, 0) INTO v_MilitaryDepartmentID
			   FROM PMIS_RES.Reservists a
			   LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			   WHERE a.ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.ReservistMilRepStatuses SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.ReservistAppointments SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.Reservists SET
			      GroupManagementSection = NULL,
				  Section = NULL,
				  Deliverer = NULL,
				  PunktID = NULL
			   WHERE ReservistID = v_ReservistID;
			   
			   DELETE FROM PMIS_RES.FillReservistsRequest
			   WHERE ReservistID = v_ReservistID;

			   INSERT INTO PMIS_RES.ReservistMilRepStatuses (ReservistID, IsCurrent, MilitaryReportStatusID, EnrolDate, SourceMilDepartmentID)
			   VALUES (v_ReservistID, 1, v_MilEmployed_StatusID, SYSDATE, v_MilitaryDepartmentID);
			END IF;
		 END IF;
	  END IF;
   END;  
   
   PROCEDURE Removed_Status_Reservist(P_EGN IN VS_OWNER.VS_LS.EGN%TYPE, Rem_reason IN PMIS_RES.GTABLE.TABLEKEY%TYPE, Rem_date IN PMIS_RES.ReservistMilRepStatuses.REMOVED_DATE%TYPE) IS
    v_MilEmployed_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusID PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusID%TYPE;
	  v_Current_StatusKey PMIS_RES.MilitaryReportStatuses.MilitaryReportStatusKey%TYPE;
	  v_PersonID VS_OWNER.VS_LS.PersonID%TYPE;
    v_pso_kod VS_OWNER.VS_LS.KOD_PSO%TYPE;
    v_Current_kod_kzv VS_OWNER.VS_LS.KOD_KZV%TYPE;
	  v_ReservistID PMIS_RES.Reservists.ReservistID%TYPE;
	  v_MilitaryDepartmentID PMIS_ADM.MilitaryDepartments.MilitaryDepartmentID%TYPE;
	  v_Cnt number;
   BEGIN
      SELECT COUNT(*) INTO v_Cnt 
	  FROM VS_OWNER.VS_LS
	  WHERE EGN = P_EGN;
	  
	  IF v_Cnt = 1 THEN --Existing person
	     SELECT PersonID INTO v_PersonID 
	     FROM VS_OWNER.VS_LS
	     WHERE EGN = P_EGN;
		 
		 v_Cnt := 0;
		 
		 SELECT COUNT(*) INTO v_Cnt
		 FROM PMIS_RES.Reservists 
		 WHERE PersonID = v_PersonID;
		 
		 IF v_Cnt = 1 THEN --Existing reservist
		    SELECT ReservistID INTO v_ReservistID
		    FROM PMIS_RES.Reservists 
		    WHERE PersonID = v_PersonID;
			
			SELECT MilitaryReportStatusID INTO v_MilEmployed_StatusID
			FROM PMIS_RES.MilitaryReportStatuses
			WHERE MilitaryReportStatusKey = 'REMOVED';
			
			SELECT NVL(c.MilitaryReportStatusID, 0) INTO v_Current_StatusID
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
			SELECT NVL(c.MilitaryReportStatusKey, 0) INTO v_Current_StatusKey
			FROM PMIS_RES.Reservists a
			LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			LEFT OUTER JOIN PMIS_RES.MilitaryReportStatuses c ON b.MilitaryReportStatusID = c.MilitaryReportStatusID
			WHERE a.ReservistID = v_ReservistID;
			
      SELECT NVL(KOD_KZV, 0) INTO v_Current_kod_kzv
			FROM VS_OWNER.VS_LS
			WHERE PersonID = v_PersonID;
      
			IF v_Current_StatusID <> v_MilEmployed_StatusID AND v_Current_StatusID > 0 THEN --The reservist isn't Military Employed and it is in the military report
			   SELECT NVL(b.SourceMilDepartmentID, 0) INTO v_MilitaryDepartmentID
			   FROM PMIS_RES.Reservists a
			   LEFT OUTER JOIN PMIS_RES.ReservistMilRepStatuses b ON a.ReservistID = b.ReservistID AND b.IsCurrent = 1
			   WHERE a.ReservistID = v_ReservistID;
			   
         SELECT PSO_KOD INTO v_pso_kod
			   FROM  VS_OWNER.KLV_PSO
			   WHERE MilDepartmentID = v_MilitaryDepartmentID;
         
			   UPDATE PMIS_RES.ReservistMilRepStatuses SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.ReservistAppointments SET 
			      IsCurrent = 0
			   WHERE ReservistID = v_ReservistID;
			   
			   UPDATE PMIS_RES.Reservists SET
			      GroupManagementSection = NULL,
				  Section = NULL,
				  Deliverer = NULL,
				  PunktID = NULL
			   WHERE ReservistID = v_ReservistID;
			   
			   DELETE FROM PMIS_RES.FillReservistsRequest
			   WHERE ReservistID = v_ReservistID;

  --       IF v_Current_kod_kzv = 'З' OR v_Current_kod_kzv = 'Р' THEN
  --          UPDATE VS_OWNER.VS_LS SET 
	--		             V_PODELENIE = NULL,
  --                 V_KOMANDA = NULL,
  --                 KOD_KZV = 'О',
  --                 KOD_PSO = v_pso_kod
  --          WHERE PersonID = v_PersonID;
  --       END IF;

			   INSERT INTO PMIS_RES.ReservistMilRepStatuses (ReservistID, IsCurrent, MilitaryReportStatusID, SourceMilDepartmentID,REMOVED_DATE, REMOVED_REASONID,CREATEDDATE ,LASTMODIFIEDDATE)
			   VALUES (v_ReservistID, 1, v_MilEmployed_StatusID, v_MilitaryDepartmentID, Rem_date, Rem_reason, SYSDATE, SYSDATE );
			END IF;
		 END IF;
	  END IF;
   END;    
   
   FUNCTION GetRanksPerReqCmdPositionHTML (P_RequestCommandPositionID IN number, P_MaxLength IN number) RETURN varchar2 IS
                               
      Ranks varchar2(4000);
      
      CURSOR MilitaryRanksCUR is
      SELECT b.ZVA_IME as DisplayName, NVL(a.IsPrimary, 0) as IsPrimary
      FROM PMIS_RES.CommandPositionMilRanks a
      LEFT OUTER JOIN VS_OWNER.KLV_ZVA b ON a.MilitaryRankID = b.ZVA_KOD
      WHERE a.RequestCommandPositionID = P_RequestCommandPositionID
      ORDER BY NVL(a.IsPrimary, 0) DESC, b.ZVA_IME;
   BEGIN
      FOR CurRec IN MilitaryRanksCUR
      LOOP 
         IF (Ranks IS NULL OR LENGTH(Ranks) < 3600) THEN
             Ranks := Ranks || '<div title="' || CurRec.DisplayName || '" style="cursor: arrow;' || CASE WHEN CurRec.IsPrimary = 1 THEN 'font-weight: bold;' ELSE '' END || '">' || 
								  SUBSTR(CurRec.DisplayName, 1, P_MaxLength) || 
								  CASE WHEN LENGTH (CurRec.DisplayName) > P_MaxLength THEN '...' ELSE '' END || 
							   '</div>';
         END IF;
      END LOOP;
      
      RETURN Ranks;
   END;
   
   FUNCTION GetRankIdsPerReqCmdPosition (P_RequestCommandPositionID IN number) RETURN varchar2 IS
                               
      RankIds varchar2(4000);
      
      CURSOR MilitaryRanksCUR is
      SELECT a.MilitaryRankID
      FROM PMIS_RES.CommandPositionMilRanks a
      WHERE a.RequestCommandPositionID = P_RequestCommandPositionID
      ORDER BY a.MilitaryRankID;
   BEGIN
      FOR CurRec IN MilitaryRanksCUR
      LOOP 
         IF (RankIds IS NULL OR LENGTH(RankIds) < 3900) THEN
             RankIds :=RankIds || CASE WHEN RankIds IS NULL THEN '' ELSE ',' END || TO_CHAR(CurRec.MilitaryRankID);
         END IF;
      END LOOP;
      
      RETURN RankIds;
   END;

END;
/
 

GRANT ALL ON PMIS_RES.CommandPositionMilRanks TO PMIS_USER_ROLE;
GRANT ALL ON VS_OWNER.VS_VSST_ZAP TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.RecordOfServiceArchives TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.ROSA_ROSID_SEQ TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_ADM.MedCert TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.MedCert_ID_SEQ TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_ADM.PsychCert TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.PsychCert_ID_SEQ TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_ADM.Addresses TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.Addresses_ID_SEQ TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_ADM.PersonAddresses TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_ADM.PersonAddresses_ID_SEQ TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_APPL.RegisterNumbers TO PMIS_USER_ROLE;
GRANT ALL ON PMIS_APPL.Register TO PMIS_USER_ROLE;

GRANT ALL ON PMIS_APPL.PositionMilitaryRanks TO PMIS_USER_ROLE;

/
